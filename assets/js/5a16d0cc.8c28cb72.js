"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[8273],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),i=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=i(t),d=a,y=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(y,l(l({ref:n},p),{},{components:t})):r.createElement(y,l({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const o={title:"Dynamic URL",tags:["ShapeSource#url"],custom_props:{example_rel_path:"Map/DynamicUrl.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/DynamicUrl.tsx"},l=void 0,s={unversionedId:"examples/Map/DynamicUrl",id:"examples/Map/DynamicUrl",title:"Dynamic URL",description:"Change shape source URL on press of the bubble.",source:"@site/docs/examples/Map/DynamicUrl.md",sourceDirName:"examples/Map",slug:"/examples/Map/DynamicUrl",permalink:"/docs/examples/Map/DynamicUrl",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/DynamicUrl.tsx",tags:[{label:"ShapeSource#url",permalink:"/docs/tags/shape-source-url"}],version:"current",frontMatter:{title:"Dynamic URL",tags:["ShapeSource#url"],custom_props:{example_rel_path:"Map/DynamicUrl.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/DynamicUrl.tsx"},sidebar:"examplesSidebar",previous:{title:"Change Offline Region",permalink:"/docs/examples/Map/CreateOfflineRegion"},next:{title:"Localize Labels",permalink:"/docs/examples/Map/LocalizeLabels"}},c={},i=[],p={toc:i},m="wrapper";function u(e){let{components:n,...o}=e;return(0,a.kt)(m,(0,r.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Change shape source URL on press of the bubble."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport { Text } from 'react-native';\nimport {\n  Camera,\n  FillLayer,\n  MapView,\n  ShapeSource,\n  StyleURL,\n} from '@rnmapbox/maps';\n\nimport Bubble from '../common/Bubble';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nconst randomCountries = [\n  {\n    id: 'FRA',\n    url: 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries/FRA.geo.json',\n  },\n  {\n    id: 'GBR',\n    url: 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries/GBR.geo.json',\n  },\n  {\n    id: 'ITA',\n    url: 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries/ITA.geo.json',\n  },\n  {\n    id: 'BEL',\n    url: 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries/BEL.geo.json',\n  },\n  {\n    id: 'ESP',\n    url: 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries/ESP.geo.json',\n  },\n];\n\nconst styles = { matchParent: { flex: 1 } };\n\nconst DynamicUrl = () => {\n  const [country, setCountry] = useState(randomCountries[0]);\n\n  const handleUpdate = () => {\n    const index = Math.floor(Math.random() * randomCountries.length);\n\n    setCountry(randomCountries[index]);\n  };\n\n  return (\n    <>\n      <MapView\n        styleURL={StyleURL.Satellite}\n        style={styles.matchParent}\n        testID={'dynamic-url'}\n      >\n        <Camera\n          defaultSettings={{\n            centerCoordinate: [2.498873, 47.180817],\n            zoomLevel: 3.25,\n          }}\n        />\n\n        <ShapeSource id=\"countryShapeSource\" url={country.url}>\n          <FillLayer\n            id=\"countryFillLayer\"\n            existing\n            style={{\n              fillColor: 'blue',\n              fillOpacity: 0.25,\n            }}\n          />\n        </ShapeSource>\n      </MapView>\n\n      <Bubble onPress={handleUpdate}>\n        <Text>Update country (active: {country.id})</Text>\n      </Bubble>\n    </>\n  );\n};\n\nexport default DynamicUrl;\n\n\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"DynamicUrl.png",src:t(8378).Z,width:"295",height:"640"}),"}"))}u.isMDXComponent=!0},8378:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/DynamicUrl-90408930be4b9c2c0bb8e9c0f6da5f4f.png"}}]);