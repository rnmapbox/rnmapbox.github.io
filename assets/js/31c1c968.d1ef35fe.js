"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[7786],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=i(n),y=a,g=u["".concat(c,".").concat(y)]||u[y]||p[y]||s;return n?r.createElement(g,l(l({ref:t},m),{},{components:n})):r.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=y;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var i=2;i<s;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const s={title:"Earthquakes",tags:["ShapeSource","SymbolLayer","ShapeSource#getClusterLeaves","CircleLayer","CircleLayer#clusterProperties","expressions"],custom_props:{example_rel_path:"SymbolCircleLayer/Earthquakes.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/Earthquakes.tsx"},l=void 0,o={unversionedId:"examples/SymbolCircleLayer/Earthquakes",id:"examples/SymbolCircleLayer/Earthquakes",title:"Earthquakes",description:"Renders earthqueke with clustering.",source:"@site/docs/examples/SymbolCircleLayer/Earthquakes.md",sourceDirName:"examples/SymbolCircleLayer",slug:"/examples/SymbolCircleLayer/Earthquakes",permalink:"/docs/examples/SymbolCircleLayer/Earthquakes",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/Earthquakes.tsx",tags:[{label:"ShapeSource",permalink:"/docs/tags/shape-source"},{label:"SymbolLayer",permalink:"/docs/tags/symbol-layer"},{label:"ShapeSource#getClusterLeaves",permalink:"/docs/tags/shape-source-get-cluster-leaves"},{label:"CircleLayer",permalink:"/docs/tags/circle-layer"},{label:"CircleLayer#clusterProperties",permalink:"/docs/tags/circle-layer-cluster-properties"},{label:"expressions",permalink:"/docs/tags/expressions"}],version:"current",frontMatter:{title:"Earthquakes",tags:["ShapeSource","SymbolLayer","ShapeSource#getClusterLeaves","CircleLayer","CircleLayer#clusterProperties","expressions"],custom_props:{example_rel_path:"SymbolCircleLayer/Earthquakes.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/Earthquakes.tsx"},sidebar:"examplesSidebar",previous:{title:"Data driven circle colors",permalink:"/docs/examples/SymbolCircleLayer/DataDrivenCircleColors"},next:{title:"Scaleable images",permalink:"/docs/examples/SymbolCircleLayer/ScalableImages"}},c={},i=[],m={toc:i},u="wrapper";function p(e){let{components:t,...s}=e;return(0,a.kt)(u,(0,r.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Renders earthqueke with clustering."),(0,a.kt)("p",null,"Click a cluster to show list of contents in the cluster ",(0,a.kt)("inlineCode",{parentName:"p"},"getClusterLeaves"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FAB, Icon, ListItem, Overlay } from '@rneui/base';\nimport MapboxGL, {\n  Camera,\n  CircleLayer,\n  CircleLayerStyle,\n  MapView,\n  ShapeSource,\n  SymbolLayer,\n  SymbolLayerStyle,\n} from '@rnmapbox/maps';\nimport { FeatureCollection } from 'geojson';\nimport moment from 'moment';\nimport React, { useRef, useState } from 'react';\nimport { FlatList, SafeAreaView } from 'react-native';\n\nimport earthQuakesJSON from '../../assets/earthquakes.json';\nimport { SF_OFFICE_COORDINATE } from '../../utils';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata';\n\nconst layerStyles: {\n  singlePoint: CircleLayerStyle;\n  clusteredPoints: CircleLayerStyle;\n  clusterCount: SymbolLayerStyle;\n} = {\n  singlePoint: {\n    circleColor: 'green',\n    circleOpacity: 0.84,\n    circleStrokeWidth: 2,\n    circleStrokeColor: 'white',\n    circleRadius: 5,\n    circlePitchAlignment: 'map',\n  },\n\n  clusteredPoints: {\n    circlePitchAlignment: 'map',\n\n    circleColor: [\n      'step',\n      ['get', 'point_count'],\n      '#51bbd6',\n      100,\n      '#f1f075',\n      750,\n      '#f28cb1',\n    ],\n\n    circleRadius: ['step', ['get', 'point_count'], 20, 100, 30, 750, 40],\n\n    circleOpacity: 0.84,\n    circleStrokeWidth: 2,\n    circleStrokeColor: 'white',\n  },\n\n  clusterCount: {\n    textField: [\n      'format',\n      ['concat', ['get', 'point_count'], '\\n'],\n      {},\n      [\n        'concat',\n        '>1: ',\n        [\n          '+',\n          ['get', 'mag2'],\n          ['get', 'mag3'],\n          ['get', 'mag4'],\n          ['get', 'mag5'],\n        ],\n      ],\n      { 'font-scale': 0.8 },\n    ],\n    textSize: 12,\n    textPitchAlignment: 'map',\n  },\n};\n\nconst styles = {\n  fab: {\n    position: 'absolute',\n    top: 10,\n    right: 10,\n    elevation: 9999,\n    zIndex: 9999,\n  },\n  matchParent: {\n    flex: 1,\n  },\n} as const;\n\nconst mag1 = ['<', ['get', 'mag'], 2];\nconst mag2 = ['all', ['>=', ['get', 'mag'], 2], ['<', ['get', 'mag'], 3]];\nconst mag3 = ['all', ['>=', ['get', 'mag'], 3], ['<', ['get', 'mag'], 4]];\nconst mag4 = ['all', ['>=', ['get', 'mag'], 4], ['<', ['get', 'mag'], 5]];\nconst mag5 = ['>=', ['get', 'mag'], 5];\n\nconst Earthquakes = () => {\n  const shapeSource = useRef<ShapeSource>(null);\n  const [selectedCluster, setSelectedCluster] = useState<FeatureCollection>();\n\n  return (\n    <>\n      <Overlay isVisible={!!selectedCluster} fullScreen>\n        <SafeAreaView style={{ flex: 1 }}>\n          <FAB\n            onPress={() => {\n              setSelectedCluster(undefined);\n            }}\n            icon={<Icon name=\"close\" />}\n            size=\"large\"\n            style={styles.fab}\n          />\n          {selectedCluster && (\n            <FlatList\n              keyExtractor={({ properties: earthquakeInfo }) => {\n                return earthquakeInfo?.code;\n              }}\n              data={selectedCluster.features}\n              renderItem={({ item: { properties: earthquakeInfo } }) => {\n                const magnitude = `Magnitude: ${earthquakeInfo?.mag}`;\n                const place = `Place: ${earthquakeInfo?.place}`;\n                const code = `Code: ${earthquakeInfo?.code}`;\n                const time = `Time: ${moment(earthquakeInfo?.time).format(\n                  'MMMM Do YYYY, h:mm:ss a',\n                )}`;\n\n                return (\n                  <ListItem bottomDivider>\n                    <ListItem.Content>\n                      <ListItem.Title>{earthquakeInfo?.title}</ListItem.Title>\n                      <ListItem.Subtitle>{magnitude}</ListItem.Subtitle>\n                      <ListItem.Subtitle>{place}</ListItem.Subtitle>\n                      <ListItem.Subtitle>{code}</ListItem.Subtitle>\n                      <ListItem.Subtitle>{time}</ListItem.Subtitle>\n                    </ListItem.Content>\n                  </ListItem>\n                );\n              }}\n            />\n          )}\n        </SafeAreaView>\n      </Overlay>\n      <MapView style={styles.matchParent} styleURL={MapboxGL.StyleURL.Dark}>\n        <Camera\n          defaultSettings={{\n            centerCoordinate: SF_OFFICE_COORDINATE,\n            zoomLevel: 6,\n          }}\n        />\n\n        <ShapeSource\n          id=\"earthquakes\"\n          onPress={async (pressedShape) => {\n            if (shapeSource.current) {\n              try {\n                const [cluster] = pressedShape.features;\n\n                const collection = await shapeSource.current.getClusterLeaves(\n                  cluster,\n                  999,\n                  0,\n                );\n\n                setSelectedCluster(collection);\n              } catch {\n                if (!pressedShape.features[0].properties?.cluster) {\n                  setSelectedCluster({\n                    type: 'FeatureCollection',\n                    features: [pressedShape.features[0]],\n                  });\n                }\n              }\n            }\n          }}\n          ref={shapeSource}\n          cluster\n          clusterRadius={50}\n          clusterMaxZoomLevel={14}\n          clusterProperties={{\n            mag1: [\n              ['+', ['accumulated'], ['get', 'mag1']],\n              ['case', mag1, 1, 0],\n            ],\n            mag2: [\n              ['+', ['accumulated'], ['get', 'mag2']],\n              ['case', mag2, 1, 0],\n            ],\n            mag3: [\n              ['+', ['accumulated'], ['get', 'mag3']],\n              ['case', mag3, 1, 0],\n            ],\n            mag4: [\n              ['+', ['accumulated'], ['get', 'mag4']],\n              ['case', mag4, 1, 0],\n            ],\n            mag5: [\n              ['+', ['accumulated'], ['get', 'mag5']],\n              ['case', mag5, 1, 0],\n            ],\n          }}\n          shape={earthQuakesJSON as unknown as FeatureCollection}\n        >\n          <SymbolLayer id=\"pointCount\" style={layerStyles.clusterCount} />\n\n          <CircleLayer\n            id=\"clusteredPoints\"\n            belowLayerID=\"pointCount\"\n            filter={['has', 'point_count']}\n            style={layerStyles.clusteredPoints}\n          />\n\n          <CircleLayer\n            id=\"singlePoint\"\n            filter={['!', ['has', 'point_count']]}\n            style={layerStyles.singlePoint}\n          />\n        </ShapeSource>\n      </MapView>\n    </>\n  );\n};\n\nexport default Earthquakes;\n\n\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Earthquakes.png",src:n(415).Z,width:"295",height:"640"}),"}"))}p.isMDXComponent=!0},415:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Earthquakes-e1bc23021bc6183b2500389d610a58c5.png"}}]);