"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[7662],{3905:(e,n,a)=>{a.d(n,{Zo:()=>i,kt:()=>g});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=t.createContext({}),c=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},i=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=c(a),u=o,g=m["".concat(p,".").concat(u)]||m[u]||f[u]||r;return a?t.createElement(g,s(s({ref:n},i),{},{components:a})):t.createElement(g,s({ref:n},i))}));function g(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<r;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1275:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(7462),o=(a(7294),a(3905));const r={title:"Offline Example",tags:["offlineManager#createPack","offlineManager#getPack","offlineManager#getPacks"],custom_props:{example_rel_path:"Map/OfflineExample.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/OfflineExample.tsx"},s=void 0,l={unversionedId:"examples/Map/OfflineExample",id:"examples/Map/OfflineExample",title:"Offline Example",description:"Demonstates basic use of offlineManager api.",source:"@site/docs/examples/Map/OfflineExample.md",sourceDirName:"examples/Map",slug:"/examples/Map/OfflineExample",permalink:"/docs/examples/Map/OfflineExample",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/OfflineExample.tsx",tags:[{label:"offlineManager#createPack",permalink:"/docs/tags/offline-manager-create-pack"},{label:"offlineManager#getPack",permalink:"/docs/tags/offline-manager-get-pack"},{label:"offlineManager#getPacks",permalink:"/docs/tags/offline-manager-get-packs"}],version:"current",frontMatter:{title:"Offline Example",tags:["offlineManager#createPack","offlineManager#getPack","offlineManager#getPacks"],custom_props:{example_rel_path:"Map/OfflineExample.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/OfflineExample.tsx"},sidebar:"examplesSidebar",previous:{title:"Map and React Navigation",permalink:"/docs/examples/Map/MapAndRNNavigation"},next:{title:"Ornaments",permalink:"/docs/examples/Map/Ornaments"}},p={},c=[],i={toc:c},m="wrapper";function f(e){let{components:n,...r}=e;return(0,o.kt)(m,(0,t.Z)({},i,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Demonstates basic use of offlineManager api."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import geoViewport from '@mapbox/geo-viewport';\nimport Mapbox, {\n  Camera,\n  MapView,\n  offlineManager,\n  StyleURL,\n} from '@rnmapbox/maps';\nimport React, { useState } from 'react';\nimport { Button, Dimensions, TextInput } from 'react-native';\n\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nconst CENTER_COORD: [number, number] = [-73.970895, 40.723279];\nconst MAPBOX_VECTOR_TILE_SIZE = 512;\nconsole.log('=> Mapbox[0]:', Mapbox);\nconsole.log('=> Mapbox.StyleURL[1]:', Mapbox.StyleURL);\nconsole.log('=> StyleURL[2]:', StyleURL);\nconst STYLE_URL = Mapbox.StyleURL.Satellite;\n\nconst OfflineExample = () => {\n  const [packName, setPackName] = useState('pack-1');\n  const [showEditTitle, setShowEditTitle] = useState(false);\n\n  return (\n    <>\n      <Button\n        title={`Pack name: ${packName}`}\n        onPress={() => {\n          setShowEditTitle(!showEditTitle);\n        }}\n      />\n      {showEditTitle && (\n        <TextInput\n          value={packName}\n          autoFocus={true}\n          onChangeText={(text) => setPackName(text)}\n          onBlur={() => setShowEditTitle(false)}\n        />\n      )}\n      <Button\n        title=\"Get all packs\"\n        onPress={async () => {\n          const packs = await offlineManager.getPacks();\n          console.log('=> packs:', packs);\n          packs.forEach((pack) => {\n            console.log(\n              'pack:',\n              pack,\n              'name:',\n              pack.name,\n              'bounds:',\n              pack?.bounds,\n              'metadata',\n              pack?.metadata,\n            );\n          });\n        }}\n      />\n      <Button\n        title=\"Get pack\"\n        onPress={async () => {\n          const pack = await offlineManager.getPack(packName);\n          if (pack) {\n            console.log(\n              'pack:',\n              pack,\n              'name:',\n              pack.name,\n              'bounds:',\n              pack?.bounds,\n              'metadata',\n              pack?.metadata,\n            );\n\n            console.log('=> status', await pack?.status());\n          }\n        }}\n      />\n      <Button\n        title=\"Resume pack\"\n        onPress={async () => {\n          const pack = await offlineManager.getPack(packName);\n          if (pack) {\n            await pack.resume();\n          }\n        }}\n      />\n      <Button\n        title=\"Remove packs\"\n        onPress={async () => {\n          const result = await offlineManager.resetDatabase();\n          console.log('Reset DB done:', result);\n        }}\n      />\n      <Button\n        title=\"Create Pack\"\n        onPress={() => {\n          const { width, height } = Dimensions.get('window');\n          const bounds: [number, number, number, number] = geoViewport.bounds(\n            CENTER_COORD,\n            12,\n            [width, height],\n            MAPBOX_VECTOR_TILE_SIZE,\n          );\n\n          const options = {\n            name: packName,\n            styleURL: STYLE_URL,\n            bounds: [\n              [bounds[0], bounds[1]],\n              [bounds[2], bounds[3]],\n            ] as [[number, number], [number, number]],\n            minZoom: 10,\n            maxZoom: 20,\n            metadata: {\n              whatIsThat: 'foo',\n            },\n          };\n          offlineManager.createPack(options, (region, status) =>\n            console.log('=> progress callback region:', 'status: ', status),\n          );\n        }}\n      />\n      <MapView style={{ flex: 1 }} styleURL={STYLE_URL}>\n        <Camera zoomLevel={10} centerCoordinate={CENTER_COORD} />\n      </MapView>\n    </>\n  );\n};\n\nexport default OfflineExample;\n\n\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"OfflineExample.png",src:a(6037).Z,width:"295",height:"640"}),"}"))}f.isMDXComponent=!0},6037:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/OfflineExample-1dc569db252a85132fd7b54ca25aa45a.png"}}]);