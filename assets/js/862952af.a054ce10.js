"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[4290],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>b});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),m=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},i=function(e){var n=m(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},y=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=m(t),y=r,b=p["".concat(c,".").concat(y)]||p[y]||u[y]||a;return t?o.createElement(b,s(s({ref:n},i),{},{components:t})):o.createElement(b,s({ref:n},i))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=y;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var m=2;m<a;m++)s[m]=t[m];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},1435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var o=t(7462),r=(t(7294),t(3905));const a={title:"Custom Icon",tags:["ShapeSource","ShapeSource#onPress","SymbolLayer","Images","SymbolLayer#iconImage"],custom_props:{example_rel_path:"SymbolCircleLayer/CustomIcon.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/CustomIcon.tsx"},s=void 0,l={unversionedId:"examples/SymbolCircleLayer/CustomIcon",id:"examples/SymbolCircleLayer/CustomIcon",title:"Custom Icon",description:"Renders a symbol layer with custom icon defined using the Images component. Clicking a location on a map add a new icon.",source:"@site/docs/examples/SymbolCircleLayer/CustomIcon.md",sourceDirName:"examples/SymbolCircleLayer",slug:"/examples/SymbolCircleLayer/CustomIcon",permalink:"/docs/examples/SymbolCircleLayer/CustomIcon",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/CustomIcon.tsx",tags:[{label:"ShapeSource",permalink:"/docs/tags/shape-source"},{label:"ShapeSource#onPress",permalink:"/docs/tags/shape-source-on-press"},{label:"SymbolLayer",permalink:"/docs/tags/symbol-layer"},{label:"Images",permalink:"/docs/tags/images"},{label:"SymbolLayer#iconImage",permalink:"/docs/tags/symbol-layer-icon-image"}],version:"current",frontMatter:{title:"Custom Icon",tags:["ShapeSource","ShapeSource#onPress","SymbolLayer","Images","SymbolLayer#iconImage"],custom_props:{example_rel_path:"SymbolCircleLayer/CustomIcon.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/CustomIcon.tsx"},sidebar:"examplesSidebar",previous:{title:"Introduction",permalink:"/docs/examples/"},next:{title:"Data driven circle colors",permalink:"/docs/examples/SymbolCircleLayer/DataDrivenCircleColors"}},c={},m=[],i={toc:m},p="wrapper";function u(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,o.Z)({},i,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Renders a symbol layer with custom icon defined using the Images component. Clicking a location on a map add a new icon."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useRef, memo, useState } from 'react';\nimport { Text } from 'react-native';\nimport MapboxGL, {\n  MapView,\n  Camera,\n  ShapeSource,\n  SymbolLayer,\n  Images,\n} from '@rnmapbox/maps';\nimport { featureCollection, feature, point } from '@turf/helpers';\n\nimport Bubble from '../common/Bubble';\nimport type { ExampleWithMetadata } from '../common/ExampleMetadata';\nimport exampleIcon from '../../assets/example.png';\n\nconst styles = {\n  icon: {\n    iconImage: 'icon',\n    iconAllowOverlap: true,\n  },\n};\n\nconst CustomIcon = memo(() => {\n  const cameraRef = useRef<Camera>(null);\n  const [stateFeatureCollection, setStateFeatureCollection] =\n    useState<GeoJSON.FeatureCollection>(\n      featureCollection([point([-73.970895, 40.723279])]),\n    );\n\n  const onPress = (e: GeoJSON.Feature) => {\n    const aFeature = feature(e.geometry);\n    aFeature.id = `${Date.now()}`;\n\n    setStateFeatureCollection(\n      featureCollection([...stateFeatureCollection.features, aFeature]),\n    );\n  };\n\n  const onSourceLayerPress = (e: any) => {\n    console.log(\n      'You pressed a layer here are your features:',\n      e.features,\n      e.coordinates,\n      e.point,\n    );\n  };\n\n  return (\n    <>\n      <MapView\n        style={{ flex: 1 }}\n        styleURL={MapboxGL.StyleURL.Light}\n        onPress={onPress}\n      >\n        <Camera\n          ref={cameraRef}\n          defaultSettings={{\n            zoomLevel: 9,\n            centerCoordinate: [-73.970895, 40.723279],\n          }}\n        />\n        <ShapeSource\n          id=\"symbolLocationSource\"\n          hitbox={{ width: 20, height: 20 }}\n          onPress={(e) => onSourceLayerPress(e)}\n          shape={stateFeatureCollection}\n        >\n          <SymbolLayer\n            id=\"symbolLocationSymbols\"\n            minZoomLevel={1}\n            style={styles.icon}\n          />\n          <Images images={{ icon: exampleIcon }} />\n        </ShapeSource>\n      </MapView>\n      <Bubble>\n        <Text>Tap on Map to add an icon</Text>\n      </Bubble>\n    </>\n  );\n});\n\nexport default CustomIcon;\n\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"CustomIcon.png",src:t(669).Z,width:"295",height:"640"}),"}"))}u.isMDXComponent=!0},669:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/CustomIcon-1a0f8c755aa7721902aa2df9deaee19f.png"}}]);