"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[100],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={title:"Map Handlers",tags:["MapView#onMapIdle"],custom_props:{example_rel_path:"V10/MapHandlers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/MapHandlers.tsx"},o=void 0,i={unversionedId:"examples/V10/MapHandlers",id:"examples/V10/MapHandlers",title:"Map Handlers",description:"Map Handlers",source:"@site/docs/examples/V10/MapHandlers.md",sourceDirName:"examples/V10",slug:"/examples/V10/MapHandlers",permalink:"/docs/examples/V10/MapHandlers",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/MapHandlers.tsx",tags:[{label:"MapView#onMapIdle",permalink:"/docs/tags/map-view-on-map-idle"}],version:"current",frontMatter:{title:"Map Handlers",tags:["MapView#onMapIdle"],custom_props:{example_rel_path:"V10/MapHandlers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/MapHandlers.tsx"},sidebar:"examplesSidebar",previous:{title:"Globe Projection",permalink:"/docs/examples/V10/GlobeProjection"},next:{title:"Markers",permalink:"/docs/examples/V10/Markers"}},l={},p=[],c={toc:p},d="wrapper";function u(e){let{components:t,...s}=e;return(0,a.kt)(d,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Map Handlers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Divider, Text } from '@rneui/base';\nimport {\n  Camera,\n  CircleLayer,\n  Logger,\n  MapState,\n  MapView,\n  ShapeSource,\n} from '@rnmapbox/maps';\nimport {\n  Feature,\n  GeoJsonProperties,\n  Geometry,\n  Point,\n  Polygon,\n  Position,\n} from 'geojson';\nimport React, { useState } from 'react';\nimport { SafeAreaView, View } from 'react-native';\n\nimport colors from '../../styles/colors';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nLogger.setLogLevel('verbose');\n\nconst styles = {\n  map: {\n    flex: 1,\n  },\n  info: {\n    flex: 0,\n    padding: 10,\n  },\n  divider: {\n    marginVertical: 6,\n  },\n  fadedText: {\n    color: 'gray',\n  },\n};\n\nconst MapHandlers = () => {\n  const [lastCallback, setLastCallback] = useState('');\n  const [mapState, setMapState] = useState<MapState>({\n    properties: {\n      center: [0, 0],\n      bounds: {\n        ne: [0, 0],\n        sw: [0, 0],\n      },\n      zoom: 0,\n      heading: 0,\n      pitch: 0,\n    },\n    gestures: {\n      isGestureActive: false,\n    },\n  });\n  const [features, setFeatures] = useState<Feature<Geometry>[]>([]);\n\n  const properties = mapState?.properties;\n  const center = properties?.center;\n  const bounds = properties?.bounds;\n  const heading = properties?.heading;\n  const gestures = mapState?.gestures;\n\n  const buildShape = (feature: Feature<Geometry>): Geometry => {\n    return {\n      type: 'Point',\n      coordinates: (feature as Feature<Point>).geometry.coordinates,\n    };\n  };\n\n  const addFeature = (feature: Feature<Geometry>, kind: string) => {\n    const _feature: Feature<Geometry> = { ...feature };\n    if (_feature.properties) {\n      _feature.properties.kind = kind;\n    }\n    setFeatures((prev) => [...prev, _feature]);\n  };\n\n  const displayCoord = (position: Position) => {\n    if (!position) {\n      return '';\n    }\n    return `${position[1].toFixed(3)}, ${position[0].toFixed(3)}`;\n  };\n\n  return (\n    <>\n      <MapView\n        style={styles.map}\n        onPress={(_feature: Feature<Geometry, GeoJsonProperties>) => {\n          addFeature(_feature, 'press');\n        }}\n        onLongPress={(_feature: Feature<Geometry, GeoJsonProperties>) => {\n          addFeature(_feature, 'longPress');\n        }}\n        onCameraChanged={(_state) => {\n          setLastCallback('onCameraChanged');\n          setMapState(_state);\n        }}\n        onMapIdle={(_state) => {\n          setLastCallback('onMapIdle');\n          setMapState(_state);\n        }}\n      >\n        <Camera\n          centerCoordinate={[-73.984638, 40.759211]}\n          zoomLevel={12}\n          animationDuration={0}\n        />\n        {features.map((f, i) => {\n          const id = JSON.stringify(\n            (f as Feature<Polygon>).geometry.coordinates,\n          );\n          const circleStyle =\n            f.properties?.kind === 'press'\n              ? {\n                  circleColor: colors.primary.blue,\n                  circleRadius: 6,\n                }\n              : {\n                  circleColor: colors.primary.pink,\n                  circleRadius: 12,\n                };\n          return (\n            <ShapeSource key={id} id={`source-${id}`} shape={buildShape(f)}>\n              <CircleLayer id={`layer-${id}`} style={circleStyle} />\n            </ShapeSource>\n          );\n        })}\n      </MapView>\n\n      <SafeAreaView>\n        <View style={styles.info}>\n          <Text style={styles.fadedText}>\n            Tap or long-press to create a marker.\n          </Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>center</Text>\n          <Text>{displayCoord(center)}</Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>bounds</Text>\n          <Text>NE: {displayCoord(bounds?.ne)}</Text>\n          <Text>SW: {displayCoord(bounds?.sw)}</Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>heading</Text>\n          <Text>{heading?.toFixed(2)}</Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>lastCallback</Text>\n          <Text>{lastCallback}</Text>\n\n          <Divider style={styles.divider} />\n\n          <View\n            style={{\n              flex: 0,\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n            }}\n          >\n            <View>\n              <Text style={styles.fadedText}>isGestureActive</Text>\n              <Text>{gestures?.isGestureActive ? 'Yes' : 'No'}</Text>\n            </View>\n          </View>\n        </View>\n      </SafeAreaView>\n    </>\n  );\n};\n\nexport default MapHandlers;\n\n\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"MapHandlers.png",src:n(5802).Z,width:"295",height:"640"}),"}"))}u.isMDXComponent=!0},5802:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/MapHandlers-bd63a0f84c7859846144d6175e8ff15c.png"}}]);