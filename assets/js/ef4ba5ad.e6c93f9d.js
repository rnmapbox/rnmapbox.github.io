"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[2175],{3905:(n,t,e)=>{e.d(t,{Zo:()=>p,kt:()=>g});var o=e(7294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,o)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,o,a=function(n,t){if(null==n)return{};var e,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)e=r[o],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)e=r[o],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var l=o.createContext({}),c=function(n){var t=o.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},p=function(n){var t=c(n.components);return o.createElement(l.Provider,{value:t},n.children)},m="mdxType",d={inlineCode:"code",wrapper:function(n){var t=n.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(n,t){var e=n.components,a=n.mdxType,r=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),m=c(e),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return e?o.createElement(g,i(i({ref:t},p),{},{components:e})):o.createElement(g,i({ref:t},p))}));function g(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var r=e.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=n,s[m]="string"==typeof n?n:a,i[1]=s;for(var c=2;c<r;c++)i[c]=e[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,e)}u.displayName="MDXCreateElement"},1518:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=e(7462),a=(e(7294),e(3905));const r={title:"Show Point Annotations",tags:["PointAnnotation"],custom_props:{example_rel_path:"Annotations/ShowPointAnnotation.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Annotations/ShowPointAnnotation.tsx"},i=void 0,s={unversionedId:"examples/Annotations/ShowPointAnnotation",id:"examples/Annotations/ShowPointAnnotation",title:"Show Point Annotations",description:"Shows Point annotation with images",source:"@site/docs/examples/Annotations/ShowPointAnnotation.md",sourceDirName:"examples/Annotations",slug:"/examples/Annotations/ShowPointAnnotation",permalink:"/docs/examples/Annotations/ShowPointAnnotation",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Annotations/ShowPointAnnotation.tsx",tags:[{label:"PointAnnotation",permalink:"/docs/tags/point-annotation"}],version:"current",frontMatter:{title:"Show Point Annotations",tags:["PointAnnotation"],custom_props:{example_rel_path:"Annotations/ShowPointAnnotation.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Annotations/ShowPointAnnotation.tsx"},sidebar:"examplesSidebar",previous:{title:"Point Annotation Anchors",permalink:"/docs/examples/Annotations/PointAnnotationAnchors"},next:{title:"Choropleth Layer By Zoom Level",permalink:"/docs/examples/FillRasterLayer/ChoroplethLayerByZoomLevel"}},l={},c=[],p={toc:c},m="wrapper";function d(n){let{components:t,...r}=n;return(0,a.kt)(m,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Shows Point annotation with images"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useRef, useState } from 'react';\nimport { View, Text, StyleSheet, Image } from 'react-native';\nimport {\n  Callout,\n  Camera,\n  FillLayer,\n  MapView,\n  PointAnnotation,\n  ShapeSource,\n  getAnnotationsLayerID,\n} from '@rnmapbox/maps';\nimport { Point, Position } from 'geojson';\nimport { Button } from '@rneui/base';\n\nimport Bubble from '../common/Bubble';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nconst ANNOTATION_SIZE = 40;\n\nconst styles = {\n  annotationContainer: {\n    alignItems: 'center',\n    backgroundColor: 'white',\n    borderColor: 'rgba(0, 0, 0, 0.45)',\n    borderRadius: ANNOTATION_SIZE / 2,\n    borderWidth: StyleSheet.hairlineWidth,\n    height: ANNOTATION_SIZE,\n    justifyContent: 'center',\n    overflow: 'hidden',\n    width: ANNOTATION_SIZE,\n  },\n  matchParent: {\n    flex: 1,\n  },\n} as const;\n\ntype AnnotationWithRemoteImageProps = {\n  id: string;\n  title: string;\n  coordinate: Position;\n};\n\nconst AnnotationWithRemoteImage = ({\n  id,\n  coordinate,\n  title,\n}: AnnotationWithRemoteImageProps) => {\n  const pointAnnotation = useRef<PointAnnotation>(null);\n\n  return (\n    <PointAnnotation\n      id={id}\n      coordinate={coordinate}\n      title={title}\n      draggable\n      onSelected={(feature) =>\n        console.log('onSelected:', feature.id, feature.geometry.coordinates)\n      }\n      onDrag={(feature) =>\n        console.log('onDrag:', feature.id, feature.geometry.coordinates)\n      }\n      onDragStart={(feature) =>\n        console.log('onDragStart:', feature.id, feature.geometry.coordinates)\n      }\n      onDragEnd={(feature) =>\n        console.log('onDragEnd:', feature.id, feature.geometry.coordinates)\n      }\n      ref={pointAnnotation}\n    >\n      <View style={styles.annotationContainer}>\n        <Image\n          source={{ uri: 'https://reactnative.dev/img/tiny_logo.png' }}\n          style={{ width: ANNOTATION_SIZE, height: ANNOTATION_SIZE }}\n          onLoad={() => pointAnnotation.current?.refresh()}\n          // Prevent rendering bitmap at unknown animation state\n          fadeDuration={0}\n        />\n      </View>\n      <Callout title=\"This is a sample loading a remote image\" />\n    </PointAnnotation>\n  );\n};\n\nconst ShowPointAnnotation = () => {\n  const [coordinates, setCoordinates] = useState([\n    [-73.99155, 40.73581],\n    [-73.99155, 40.73681],\n  ]);\n  const [layerRendering, setLayerRendering] = useState<'below' | 'above'>(\n    'below',\n  );\n\n  const renderAnnotations = () => {\n    const items = [];\n\n    for (let i = 0; i < coordinates.length; i++) {\n      const coordinate = coordinates[i];\n\n      const title = `Lon: ${coordinate[0]} Lat: ${coordinate[1]}`;\n      const id = `pointAnnotation${i}`;\n\n      if (i % 2 === 1) {\n        items.push(\n          null,\n          <AnnotationWithRemoteImage\n            key={id}\n            id={id}\n            coordinate={coordinate}\n            title={title}\n          />,\n        );\n      } else {\n        items.push(\n          null,\n          <PointAnnotation\n            key={id}\n            id={id}\n            coordinate={coordinate}\n            title={title}\n          >\n            <View style={styles.annotationContainer} />\n            <Callout title=\"This is an empty example\" />\n          </PointAnnotation>,\n        );\n      }\n    }\n\n    return items;\n  };\n\n  return (\n    <>\n      <MapView\n        onPress={(feature) => {\n          setCoordinates((prevState) => [\n            ...prevState,\n            (feature.geometry as Point).coordinates,\n          ]);\n        }}\n        style={styles.matchParent}\n      >\n        <Camera\n          defaultSettings={{ centerCoordinate: coordinates[0], zoomLevel: 16 }}\n        />\n\n        {renderAnnotations()}\n\n        <ShapeSource\n          id=\"polygon\"\n          shape={{\n            coordinates: [\n              [\n                [-73.98813787946587, 40.73199795542578],\n                [-73.98313197853199, 40.7388685230859],\n                [-73.98962548210226, 40.74155214586244],\n                [-73.9945841575561, 40.73468185536569],\n                [-73.98813787946587, 40.73199795542578],\n              ],\n            ],\n            type: 'Polygon',\n          }}\n        >\n          <FillLayer\n            id=\"polygon\"\n            {...{\n              [layerRendering + 'LayerID']:\n                getAnnotationsLayerID('PointAnnotations'),\n            }}\n            style={{\n              fillColor: 'rgba(255, 0, 0, 0.5)',\n              fillOutlineColor: 'red',\n            }}\n          />\n        </ShapeSource>\n      </MapView>\n\n      <Bubble>\n        <Text style={{ marginBottom: 10 }}>\n          Click to add a point annotation\n        </Text>\n        <Button\n          onPress={() =>\n            setLayerRendering(\n              (prevState) =>\n                (({ above: 'below', below: 'above' } as const)[prevState]),\n            )\n          }\n        >\n          Render Polygon {{ above: 'below', below: 'above' }[layerRendering]}\n        </Button>\n      </Bubble>\n    </>\n  );\n};\n\nexport default ShowPointAnnotation;\n\n\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"ShowPointAnnotation.png",src:e(1901).Z,width:"295",height:"640"}),"}"))}d.isMDXComponent=!0},1901:(n,t,e)=>{e.d(t,{Z:()=>o});const o=e.p+"assets/images/ShowPointAnnotation-2d7f8225d42093a243b88e24a4d47985.png"}}]);