"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[4082],{4297:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(5893),s=t(1151);const o={title:"Markers",tags:["MarkerView"],custom_props:{example_rel_path:"V10/Markers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/Markers.tsx"},a=void 0,l={id:"examples/V10/Markers",title:"Markers",description:"Test view for MarkerViews",source:"@site/docs/examples/V10/Markers.md",sourceDirName:"examples/V10",slug:"/examples/V10/Markers",permalink:"/docs/examples/V10/Markers",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/Markers.tsx",tags:[{inline:!0,label:"MarkerView",permalink:"/docs/tags/marker-view"}],version:"current",frontMatter:{title:"Markers",tags:["MarkerView"],custom_props:{example_rel_path:"V10/Markers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/Markers.tsx"},sidebar:"examplesSidebar",previous:{title:"Map Handlers",permalink:"/docs/examples/V10/MapHandlers"},next:{title:"Query Terrain Elevation",permalink:"/docs/examples/V10/QueryTerrainElevation"}},i={},c=[];function d(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Test view for MarkerViews"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Button, Divider, Text } from '@rneui/base';\nimport { Camera, Logger, MapView, MarkerView } from '@rnmapbox/maps';\nimport { Position } from 'geojson';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Pressable, StyleSheet, View } from 'react-native';\n\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nLogger.setLogLevel('verbose');\n\ntype MarkerConfig = {\n  coords: Position;\n  color: string;\n};\n\nconst markerCount = 20;\nconst centerCoord = [-73.99155, 40.72];\nconst allColors = ['red', 'green', 'blue', 'purple'];\n\nconst Markers = () => {\n  const [markers, setMarkers] = useState<MarkerConfig[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState<number | undefined>();\n  const [anchor, setAnchor] = useState({ x: 0.5, y: 0.5 });\n  const [allowOverlap, setAllowOverlap] = useState(true);\n\n  const [show, setShow] = useState(true);\n  const [size, setSize] = useState(1);\n\n  const randomizeCoordinatesAndColors = useCallback(() => {\n    const newMarkers = new Array(markerCount).fill(0).map((o, i) => {\n      return {\n        coords: [\n          centerCoord[0] + (Math.random() - 0.5) * 0.008,\n          centerCoord[1] + (Math.random() - 0.5) * 0.008,\n        ],\n        color: allColors[i % allColors.length],\n      };\n    });\n\n    setMarkers(newMarkers);\n  }, []);\n\n  useEffect(() => {\n    randomizeCoordinatesAndColors();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <MapView style={{ flex: 1 }}>\n        <Camera\n          defaultSettings={{ centerCoordinate: centerCoord, zoomLevel: 14 }}\n          centerCoordinate={centerCoord}\n          zoomLevel={14}\n        />\n\n        {markers.map((marker, i) => {\n          return (\n            <MarkerView\n              key={`MarkerView-${marker.coords.join('-')}`}\n              coordinate={marker.coords}\n              anchor={anchor}\n              allowOverlap={allowOverlap}\n              isSelected={i === selectedIndex}\n              style={{ display: show ? 'flex' : 'none' }}\n            >\n              <Pressable\n                style={[\n                  styles.markerBox,\n                  { backgroundColor: marker.color, padding: 4 * size },\n                ]}\n                onPress={() =>\n                  setSelectedIndex((index) => (index === i ? -1 : i))\n                }\n              >\n                <Text style={styles.markerText}>Marker {i + 1}</Text>\n              </Pressable>\n            </MarkerView>\n          );\n        })}\n      </MapView>\n\n      <View style={styles.buttonsHolder}>\n        <Button\n          style={styles.button}\n          title={'Rearrange'}\n          onPress={randomizeCoordinatesAndColors}\n        />\n\n        <Divider style={styles.divider} />\n\n        <View>\n          {[\n            [\n              [0, 0],\n              [0.5, 0],\n              [1, 0],\n            ],\n            [\n              [0, 0.5],\n              [0.5, 0.5],\n              [1, 0.5],\n            ],\n            [\n              [0, 1],\n              [0.5, 1],\n              [1, 1],\n            ],\n          ].map((anchors, index) => {\n            return (\n              <View\n                key={index}\n                style={{\n                  flex: 0,\n                  flexDirection: 'row',\n                  justifyContent: 'space-between',\n                }}\n              >\n                {anchors.map(([x, y]) => {\n                  const isSelected = anchor.x === x && anchor.y === y;\n                  return (\n                    <View key={`${x}-${y}`}>\n                      <Button\n                        type={isSelected ? 'solid' : 'outline'}\n                        style={styles.button}\n                        title={`${x}, ${y}`}\n                        onPress={() => setAnchor({ x, y })}\n                      />\n                    </View>\n                  );\n                })}\n              </View>\n            );\n          })}\n        </View>\n\n        <Divider style={styles.divider} />\n\n        <Button\n          style={styles.button}\n          title={show ? 'Hide markers' : 'Show markers'}\n          onPress={() => {\n            setShow(!show);\n          }}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Button\n          style={styles.button}\n          title={allowOverlap ? 'Disallow overlap' : 'Allow overlap'}\n          onPress={() => {\n            setAllowOverlap(!allowOverlap);\n          }}\n        />\n\n        <Divider style={styles.divider} />\n\n        <View\n          style={{\n            flex: 0,\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Button\n            style={styles.button}\n            title={'Decrease size'}\n            onPress={() => {\n              setSize((s) => s - 1);\n            }}\n          />\n          <Button\n            style={styles.button}\n            title={'Increase size'}\n            onPress={() => {\n              setSize((s) => s + 1);\n            }}\n          />\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  markerBox: {\n    flex: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 6,\n    padding: 4,\n    borderWidth: 2,\n    borderColor: 'white',\n  },\n  markerBoxSelected: {\n    padding: 12,\n  },\n  markerText: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold',\n  },\n  buttonsHolder: {\n    flex: 0,\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n  },\n  button: {\n    flex: 0,\n    alignSelf: 'stretch',\n  },\n  divider: {\n    marginVertical: 10,\n  },\n});\n\nexport default Markers;\n\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Markers.png",src:t(7174).Z+"",width:"295",height:"640"}),"}"]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7174:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Markers-32388fac4f219ec817de197c0967172c.png"},1151:(e,n,t)=>{t.d(n,{a:()=>a});var r=t(7294);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);