"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[3131],{5283:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=a(5893),r=a(1151);const s={title:"Feature State",tags:["MapView","MapView#setFeatureState","MapView#getFeatureState","MapView#removeFeatureState"],custom_props:{example_rel_path:"V10/FeatureState.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/FeatureState.tsx"},o=void 0,l={id:"examples/V10/FeatureState",title:"Feature State",description:"Demonstrates modifying the feature state.",source:"@site/docs/examples/V10/FeatureState.md",sourceDirName:"examples/V10",slug:"/examples/V10/FeatureState",permalink:"/docs/examples/V10/FeatureState",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/FeatureState.tsx",tags:[{inline:!0,label:"MapView",permalink:"/docs/tags/map-view"},{inline:!0,label:"MapView#setFeatureState",permalink:"/docs/tags/map-view-set-feature-state"},{inline:!0,label:"MapView#getFeatureState",permalink:"/docs/tags/map-view-get-feature-state"},{inline:!0,label:"MapView#removeFeatureState",permalink:"/docs/tags/map-view-remove-feature-state"}],version:"current",frontMatter:{title:"Feature State",tags:["MapView","MapView#setFeatureState","MapView#getFeatureState","MapView#removeFeatureState"],custom_props:{example_rel_path:"V10/FeatureState.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/FeatureState.tsx"},sidebar:"examplesSidebar",previous:{title:"Camera Animation",permalink:"/docs/examples/V10/CameraAnimation"},next:{title:"Globe Projection",permalink:"/docs/examples/V10/GlobeProjection"}},p={},i=[];function c(e){const t={code:"code",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Demonstrates modifying the feature state."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"import { ComponentProps, useCallback, useRef } from 'react';\nimport { Camera, FillLayer, MapView, ShapeSource } from '@rnmapbox/maps';\n\nimport { ExampleWithMetadata } from '../common/ExampleMetadata';\n\ntype CustomProperties = {\n  normalColor: string;\n  selectedColor: string;\n};\n\nconst SOURCE: GeoJSON.FeatureCollection<GeoJSON.Polygon, CustomProperties> = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      id: 1,\n      properties: { normalColor: '#0000cc', selectedColor: '#ff0000' },\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [-107.8857421875, 45.197522303056815],\n            [-106.5234375, 36.58024660149866],\n            [-120.498046875, 36.10237644873645],\n            [-120.05859375, 44.918139299585135],\n            [-107.8857421875, 45.197522303056815],\n          ],\n        ],\n      },\n    },\n    {\n      type: 'Feature',\n      id: 2,\n      properties: { normalColor: '#00cc00', selectedColor: '#ff00ff' },\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [-90.59326171875, 45.25942203635168],\n            [-87.1875, 40.46366632458768],\n            [-87.1875, 37.07271048132945],\n            [-102.81005859375, 36.89719446989035],\n            [-101.77734375, 44.8714427501659],\n            [-90.59326171875, 45.25942203635168],\n          ],\n        ],\n      },\n    },\n  ],\n};\n\nconst SHAPES_SOURCE_ID = 'shapes';\nconst SELECTED_KEY = 'selected';\n\nconst styles = {\n  map: {\n    flex: 1,\n  },\n  shapesFill: {\n    fillColor: [\n      'case',\n      ['to-boolean', ['feature-state', SELECTED_KEY]],\n      ['get', 'selectedColor'],\n      ['get', 'normalColor'],\n    ],\n  },\n} as const;\n\ntype ShapeSourceProps = ComponentProps<typeof ShapeSource>;\n\nconst FeatureState = () => {\n  const mapRef = useRef<MapView>(null);\n\n  const toggleSelected = useCallback(async (featureId: string) => {\n    const { current: map } = mapRef;\n    if (!map) return;\n\n    console.log(`Toggling selected state for ID '${featureId}'`);\n\n    try {\n      const currentState = await map.getFeatureState(\n        featureId,\n        SHAPES_SOURCE_ID,\n      );\n\n      console.log(`Current state: ${JSON.stringify(currentState)}`);\n\n      if ('selected' in currentState) {\n        await map.removeFeatureState(featureId, SELECTED_KEY, SHAPES_SOURCE_ID);\n      } else {\n        await map.setFeatureState(\n          featureId,\n          {\n            [SELECTED_KEY]: true,\n          },\n          SHAPES_SOURCE_ID,\n        );\n      }\n    } catch (err) {\n      console.error(\n        `Failed to toggle feature state for ID '${featureId}': ${\n          (err as Error).message\n        }`,\n      );\n    }\n  }, []);\n\n  const handlePressShapes: NonNullable<ShapeSourceProps['onPress']> =\n    useCallback(\n      (e) => {\n        const [feature] = e.features;\n        if (!feature || feature.id === undefined) return;\n        toggleSelected(feature.id.toString());\n      },\n      [toggleSelected],\n    );\n\n  return (\n    <MapView ref={mapRef} style={styles.map}>\n      <Camera zoomLevel={2} centerCoordinate={[-101.051593, 41.370337]} />\n      <ShapeSource\n        id={SHAPES_SOURCE_ID}\n        shape={SOURCE}\n        onPress={handlePressShapes}\n      >\n        <FillLayer id=\"shapesFill\" style={styles.shapesFill} />\n      </ShapeSource>\n    </MapView>\n  );\n};\n\nexport default FeatureState;\n\nconst metadata: ExampleWithMetadata['metadata'] = {\n  title: 'Feature State',\n  tags: [\n    'MapView',\n    'MapView#setFeatureState',\n    'MapView#getFeatureState',\n    'MapView#removeFeatureState',\n  ],\n  docs: `\nDemonstrates modifying the feature state.\n`,\n};\n\nFeatureState.metadata = metadata;\n\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.img,{alt:"FeatureState.png",src:a(2185).Z+"",width:"295",height:"640"}),"}"]})]})}function m(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},2185:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/FeatureState-3750e4e24c5ae29396060b406257720c.png"},1151:(e,t,a)=>{a.d(t,{Z:()=>l,a:()=>o});var n=a(7294);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);