"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[7786],{5859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var a=n(5893),r=n(1151);const s={title:"Earthquakes",tags:["ShapeSource","SymbolLayer","ShapeSource#getClusterLeaves","CircleLayer","CircleLayer#clusterProperties","expressions"],custom_props:{example_rel_path:"SymbolCircleLayer/Earthquakes.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/Earthquakes.tsx"},l=void 0,o={id:"examples/SymbolCircleLayer/Earthquakes",title:"Earthquakes",description:"Renders earthqueke with clustering.",source:"@site/docs/examples/SymbolCircleLayer/Earthquakes.md",sourceDirName:"examples/SymbolCircleLayer",slug:"/examples/SymbolCircleLayer/Earthquakes",permalink:"/docs/examples/SymbolCircleLayer/Earthquakes",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/Earthquakes.tsx",tags:[{inline:!0,label:"ShapeSource",permalink:"/docs/tags/shape-source"},{inline:!0,label:"SymbolLayer",permalink:"/docs/tags/symbol-layer"},{inline:!0,label:"ShapeSource#getClusterLeaves",permalink:"/docs/tags/shape-source-get-cluster-leaves"},{inline:!0,label:"CircleLayer",permalink:"/docs/tags/circle-layer"},{inline:!0,label:"CircleLayer#clusterProperties",permalink:"/docs/tags/circle-layer-cluster-properties"},{inline:!0,label:"expressions",permalink:"/docs/tags/expressions"}],version:"current",frontMatter:{title:"Earthquakes",tags:["ShapeSource","SymbolLayer","ShapeSource#getClusterLeaves","CircleLayer","CircleLayer#clusterProperties","expressions"],custom_props:{example_rel_path:"SymbolCircleLayer/Earthquakes.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/Earthquakes.tsx"},sidebar:"examplesSidebar",previous:{title:"Data driven circle colors",permalink:"/docs/examples/SymbolCircleLayer/DataDrivenCircleColors"},next:{title:"Scaleable images",permalink:"/docs/examples/SymbolCircleLayer/ScalableImages"}},c={},i=[];function m(e){const t={code:"code",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Renders earthqueke with clustering."}),"\n",(0,a.jsxs)(t.p,{children:["Click a cluster to show list of contents in the cluster ",(0,a.jsx)(t.code,{children:"getClusterLeaves"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import { FAB, Icon, ListItem, Overlay } from '@rneui/base';\nimport MapboxGL, {\n  Camera,\n  CircleLayer,\n  CircleLayerStyle,\n  MapView,\n  ShapeSource,\n  SymbolLayer,\n  SymbolLayerStyle,\n} from '@rnmapbox/maps';\nimport { FeatureCollection } from 'geojson';\nimport moment from 'moment';\nimport React, { useRef, useState } from 'react';\nimport { FlatList, SafeAreaView } from 'react-native';\n\nimport earthQuakesJSON from '../../assets/earthquakes.json';\nimport { SF_OFFICE_COORDINATE } from '../../utils';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata';\n\nconst layerStyles: {\n  singlePoint: CircleLayerStyle;\n  clusteredPoints: CircleLayerStyle;\n  clusterCount: SymbolLayerStyle;\n} = {\n  singlePoint: {\n    circleColor: 'green',\n    circleOpacity: 0.84,\n    circleStrokeWidth: 2,\n    circleStrokeColor: 'white',\n    circleRadius: 5,\n    circlePitchAlignment: 'map',\n  },\n\n  clusteredPoints: {\n    circlePitchAlignment: 'map',\n\n    circleColor: [\n      'step',\n      ['get', 'point_count'],\n      '#51bbd6',\n      100,\n      '#f1f075',\n      750,\n      '#f28cb1',\n    ],\n\n    circleRadius: ['step', ['get', 'point_count'], 20, 100, 30, 750, 40],\n\n    circleOpacity: 0.84,\n    circleStrokeWidth: 2,\n    circleStrokeColor: 'white',\n  },\n\n  clusterCount: {\n    textField: [\n      'format',\n      ['concat', ['get', 'point_count'], '\\n'],\n      {},\n      [\n        'concat',\n        '>1: ',\n        [\n          '+',\n          ['get', 'mag2'],\n          ['get', 'mag3'],\n          ['get', 'mag4'],\n          ['get', 'mag5'],\n        ],\n      ],\n      { 'font-scale': 0.8 },\n    ],\n    textSize: 12,\n    textPitchAlignment: 'map',\n  },\n};\n\nconst styles = {\n  fab: {\n    position: 'absolute',\n    top: 10,\n    right: 10,\n    elevation: 9999,\n    zIndex: 9999,\n  },\n  matchParent: {\n    flex: 1,\n  },\n} as const;\n\nconst mag1 = ['<', ['get', 'mag'], 2];\nconst mag2 = ['all', ['>=', ['get', 'mag'], 2], ['<', ['get', 'mag'], 3]];\nconst mag3 = ['all', ['>=', ['get', 'mag'], 3], ['<', ['get', 'mag'], 4]];\nconst mag4 = ['all', ['>=', ['get', 'mag'], 4], ['<', ['get', 'mag'], 5]];\nconst mag5 = ['>=', ['get', 'mag'], 5];\n\nconst Earthquakes = () => {\n  const shapeSource = useRef<ShapeSource>(null);\n  const [selectedCluster, setSelectedCluster] = useState<FeatureCollection>();\n\n  return (\n    <>\n      <Overlay isVisible={!!selectedCluster} fullScreen>\n        <SafeAreaView style={{ flex: 1 }}>\n          <FAB\n            onPress={() => {\n              setSelectedCluster(undefined);\n            }}\n            icon={<Icon name=\"close\" />}\n            size=\"large\"\n            style={styles.fab}\n          />\n          {selectedCluster && (\n            <FlatList\n              keyExtractor={({ properties: earthquakeInfo }) => {\n                return earthquakeInfo?.code;\n              }}\n              data={selectedCluster.features}\n              renderItem={({ item: { properties: earthquakeInfo } }) => {\n                const magnitude = `Magnitude: ${earthquakeInfo?.mag}`;\n                const place = `Place: ${earthquakeInfo?.place}`;\n                const code = `Code: ${earthquakeInfo?.code}`;\n                const time = `Time: ${moment(earthquakeInfo?.time).format(\n                  'MMMM Do YYYY, h:mm:ss a',\n                )}`;\n\n                return (\n                  <ListItem bottomDivider>\n                    <ListItem.Content>\n                      <ListItem.Title>{earthquakeInfo?.title}</ListItem.Title>\n                      <ListItem.Subtitle>{magnitude}</ListItem.Subtitle>\n                      <ListItem.Subtitle>{place}</ListItem.Subtitle>\n                      <ListItem.Subtitle>{code}</ListItem.Subtitle>\n                      <ListItem.Subtitle>{time}</ListItem.Subtitle>\n                    </ListItem.Content>\n                  </ListItem>\n                );\n              }}\n            />\n          )}\n        </SafeAreaView>\n      </Overlay>\n      <MapView style={styles.matchParent} styleURL={MapboxGL.StyleURL.Dark}>\n        <Camera\n          defaultSettings={{\n            centerCoordinate: SF_OFFICE_COORDINATE,\n            zoomLevel: 6,\n          }}\n        />\n\n        <ShapeSource\n          id=\"earthquakes\"\n          onPress={async (pressedShape) => {\n            if (shapeSource.current) {\n              try {\n                const [cluster] = pressedShape.features;\n\n                const collection = await shapeSource.current.getClusterLeaves(\n                  cluster,\n                  999,\n                  0,\n                );\n\n                setSelectedCluster(collection);\n              } catch {\n                if (!pressedShape.features[0].properties?.cluster) {\n                  setSelectedCluster({\n                    type: 'FeatureCollection',\n                    features: [pressedShape.features[0]],\n                  });\n                }\n              }\n            }\n          }}\n          ref={shapeSource}\n          cluster\n          clusterRadius={50}\n          clusterMaxZoomLevel={14}\n          clusterProperties={{\n            mag1: [\n              ['+', ['accumulated'], ['get', 'mag1']],\n              ['case', mag1, 1, 0],\n            ],\n            mag2: [\n              ['+', ['accumulated'], ['get', 'mag2']],\n              ['case', mag2, 1, 0],\n            ],\n            mag3: [\n              ['+', ['accumulated'], ['get', 'mag3']],\n              ['case', mag3, 1, 0],\n            ],\n            mag4: [\n              ['+', ['accumulated'], ['get', 'mag4']],\n              ['case', mag4, 1, 0],\n            ],\n            mag5: [\n              ['+', ['accumulated'], ['get', 'mag5']],\n              ['case', mag5, 1, 0],\n            ],\n          }}\n          shape={earthQuakesJSON as unknown as FeatureCollection}\n        >\n          <SymbolLayer id=\"pointCount\" style={layerStyles.clusterCount} />\n\n          <CircleLayer\n            id=\"clusteredPoints\"\n            belowLayerID=\"pointCount\"\n            filter={['has', 'point_count']}\n            style={layerStyles.clusteredPoints}\n          />\n\n          <CircleLayer\n            id=\"singlePoint\"\n            filter={['!', ['has', 'point_count']]}\n            style={layerStyles.singlePoint}\n          />\n        </ShapeSource>\n      </MapView>\n    </>\n  );\n};\n\nexport default Earthquakes;\n\n\n"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"Earthquakes.png",src:n(7729).Z+"",width:"295",height:"640"}),"}"]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},7729:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Earthquakes-68b7643b390a23afb5dc106aeeda5612.png"},1151:(e,t,n)=>{n.d(t,{a:()=>l});var a=n(7294);const r={},s=a.createContext(r);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);