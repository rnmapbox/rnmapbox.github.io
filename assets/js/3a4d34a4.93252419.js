"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[100],{312:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(5893),a=t(1151);const r={title:"Map Handlers",tags:["MapView#onMapIdle"],custom_props:{example_rel_path:"V10/MapHandlers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/MapHandlers.tsx"},o=void 0,i={id:"examples/V10/MapHandlers",title:"Map Handlers",description:"Map Handlers",source:"@site/docs/examples/V10/MapHandlers.md",sourceDirName:"examples/V10",slug:"/examples/V10/MapHandlers",permalink:"/docs/examples/V10/MapHandlers",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/MapHandlers.tsx",tags:[{inline:!0,label:"MapView#onMapIdle",permalink:"/docs/tags/map-view-on-map-idle"}],version:"current",frontMatter:{title:"Map Handlers",tags:["MapView#onMapIdle"],custom_props:{example_rel_path:"V10/MapHandlers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/MapHandlers.tsx"},sidebar:"examplesSidebar",previous:{title:"Globe Projection",permalink:"/docs/examples/V10/GlobeProjection"},next:{title:"Markers",permalink:"/docs/examples/V10/Markers"}},p={},l=[];function d(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Map Handlers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { Divider, Text } from '@rneui/base';\nimport {\n  Camera,\n  CircleLayer,\n  Logger,\n  type MapState,\n  MapView,\n  ShapeSource,\n} from '@rnmapbox/maps';\nimport type {\n  Feature,\n  GeoJsonProperties,\n  Geometry,\n  Point,\n  Polygon,\n  Position,\n} from 'geojson';\nimport { useState } from 'react';\nimport { View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport colors from '../../styles/colors';\nimport type { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nLogger.setLogLevel('verbose');\n\nconst styles = {\n  map: {\n    flex: 1,\n  },\n  info: {\n    flex: 0,\n    padding: 10,\n  },\n  divider: {\n    marginVertical: 6,\n  },\n  fadedText: {\n    color: 'gray',\n  },\n};\n\nconst MapHandlers = () => {\n  const [lastCallback, setLastCallback] = useState('');\n  const [mapState, setMapState] = useState<MapState>({\n    properties: {\n      center: [0, 0],\n      bounds: {\n        ne: [0, 0],\n        sw: [0, 0],\n      },\n      zoom: 0,\n      heading: 0,\n      pitch: 0,\n    },\n    gestures: {\n      isGestureActive: false,\n    },\n  });\n  const [features, setFeatures] = useState<Feature<Geometry>[]>([]);\n\n  const properties = mapState?.properties;\n  const center = properties?.center;\n  const bounds = properties?.bounds;\n  const heading = properties?.heading;\n  const gestures = mapState?.gestures;\n\n  const buildShape = (feature: Feature<Geometry>): Geometry => {\n    return {\n      type: 'Point',\n      coordinates: (feature as Feature<Point>).geometry.coordinates,\n    };\n  };\n\n  const addFeature = (feature: Feature<Geometry>, kind: string) => {\n    const _feature: Feature<Geometry> = { ...feature };\n    if (_feature.properties) {\n      _feature.properties.kind = kind;\n    }\n    setFeatures((prev) => [...prev, _feature]);\n  };\n\n  const displayCoord = (position: Position) => {\n    if (!position) {\n      return '';\n    }\n    return `${position[1]!.toFixed(3)}, ${position[0]!.toFixed(3)}`;\n  };\n\n  return (\n    <>\n      <MapView\n        style={styles.map}\n        onPress={(_feature: Feature<Geometry, GeoJsonProperties>) => {\n          addFeature(_feature, 'press');\n        }}\n        onLongPress={(_feature: Feature<Geometry, GeoJsonProperties>) => {\n          addFeature(_feature, 'longPress');\n        }}\n        onCameraChanged={(_state) => {\n          setLastCallback('onCameraChanged');\n          setMapState(_state);\n        }}\n        onMapIdle={(_state) => {\n          setLastCallback('onMapIdle');\n          setMapState(_state);\n        }}\n      >\n        <Camera\n          centerCoordinate={[-73.984638, 40.759211]}\n          zoomLevel={12}\n          animationDuration={0}\n        />\n        {features.map((f, _i) => {\n          const id = JSON.stringify(\n            (f as Feature<Polygon>).geometry.coordinates,\n          );\n          const circleStyle =\n            f.properties?.kind === 'press'\n              ? {\n                  circleColor: colors.primary.blue,\n                  circleRadius: 6,\n                }\n              : {\n                  circleColor: colors.primary.pink,\n                  circleRadius: 12,\n                };\n          return (\n            <ShapeSource key={id} id={`source-${id}`} shape={buildShape(f)}>\n              <CircleLayer id={`layer-${id}`} style={circleStyle} />\n            </ShapeSource>\n          );\n        })}\n      </MapView>\n\n      <SafeAreaView>\n        <View style={styles.info}>\n          <Text style={styles.fadedText}>\n            Tap or long-press to create a marker.\n          </Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>center</Text>\n          <Text>{displayCoord(center)}</Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>bounds</Text>\n          <Text>NE: {displayCoord(bounds?.ne)}</Text>\n          <Text>SW: {displayCoord(bounds?.sw)}</Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>heading</Text>\n          <Text>{heading?.toFixed(2)}</Text>\n\n          <Divider style={styles.divider} />\n\n          <Text style={styles.fadedText}>lastCallback</Text>\n          <Text>{lastCallback}</Text>\n\n          <Divider style={styles.divider} />\n\n          <View\n            style={{\n              flex: 0,\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n            }}\n          >\n            <View>\n              <Text style={styles.fadedText}>isGestureActive</Text>\n              <Text>{gestures?.isGestureActive ? 'Yes' : 'No'}</Text>\n            </View>\n          </View>\n        </View>\n      </SafeAreaView>\n    </>\n  );\n};\n\nexport default MapHandlers;\n\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{alt:"MapHandlers.png",src:t(5802).Z+"",width:"295",height:"640"}),"}"]})]})}function c(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5802:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/MapHandlers-ec1d9e323f52c8fe97f59d13f2a55247.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var s=t(7294);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);