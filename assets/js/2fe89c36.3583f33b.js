"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[8755],{4369:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var t=r(5893),a=r(1151);const s={title:"Offline Tilesets",tags:[],custom_props:{example_rel_path:"CacheOffline/OfflineTilesets.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/CacheOffline/OfflineTilesets.tsx"},o=void 0,i={id:"examples/CacheOffline/OfflineTilesets",title:"Offline Tilesets",description:"Uses offline manager tileset option to include additional tilesets in the offline pack.",source:"@site/docs/examples/CacheOffline/OfflineTilesets.md",sourceDirName:"examples/CacheOffline",slug:"/examples/CacheOffline/OfflineTilesets",permalink:"/docs/examples/CacheOffline/OfflineTilesets",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/CacheOffline/OfflineTilesets.tsx",tags:[],version:"current",frontMatter:{title:"Offline Tilesets",tags:[],custom_props:{example_rel_path:"CacheOffline/OfflineTilesets.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/CacheOffline/OfflineTilesets.tsx"},sidebar:"examplesSidebar",previous:{title:"Offline Example",permalink:"/docs/examples/CacheOffline/OfflineExample"},next:{title:"Fit",permalink:"/docs/examples/Camera/Fit"}},l={},c=[];function f(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Uses offline manager tileset option to include additional tilesets in the offline pack."}),"\n",(0,t.jsx)(n.p,{children:"To test:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'First load the example with wifi/netowork off, make sure the map is blank, and also pressing "Center Offline Location" is blank'}),"\n",(0,t.jsx)(n.li,{children:"Close the test, enable wifi, open test again"}),"\n",(0,t.jsx)(n.li,{children:'Disable wifi/network presss "Center Offline Location" make sure blue line which shows country contours show up'}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { Button, View, Alert } from 'react-native';\nimport { LinearProgress } from '@rneui/base';\nimport {\n  MapView,\n  Camera,\n  ShapeSource,\n  LineLayer,\n  offlineManager,\n  VectorSource,\n} from '@rnmapbox/maps';\n\nimport { ExampleWithMetadata } from '../common/ExampleMetadata';\n\nconst packName = 'map-with-3d-terrain-pack';\nconst STYLE_URL = 'mapbox://styles/mapbox/satellite-streets-v11';\nconst DISTANCE = 0.85;\nconst CENTER: [number, number] = [6.58968, 45.39701];\nconst bounds: [number, number, number, number] = [\n  CENTER[0] - DISTANCE,\n  CENTER[1] - DISTANCE,\n  CENTER[0] + DISTANCE,\n  CENTER[1] + DISTANCE,\n];\n\nfunction Menu({ cameraRef }: { cameraRef: React.RefObject<Camera | null> }) {\n  const [progress, setProgress] = React.useState(0);\n\n  function formatError(err: unknown) {\n    if (!err) return 'Unknown error';\n    if (typeof err === 'string') return err;\n    if (err instanceof Error) return err.message;\n    try {\n      return JSON.stringify(err, null, 2);\n    } catch {\n      return String(err);\n    }\n  }\n\n  return (\n    <View>\n      <Button\n        title=\"Delete\"\n        onPress={async () => {\n          try {\n            const pack = await offlineManager.getPack(packName);\n            if (pack) {\n              await offlineManager.deletePack(packName);\n              setProgress(0);\n            }\n          } catch (error) {\n            Alert.alert('Offline Error', formatError(error));\n            console.error('Error deleting pack:', error);\n          }\n        }}\n      />\n      <Button\n        title=\"Create\"\n        onPress={() => {\n          (async () => {\n            try {\n              await offlineManager.createPack(\n                {\n                  name: packName,\n                  styleURL: STYLE_URL,\n                  tilesets: ['mapbox://mapbox.country-boundaries-v1'],\n                  bounds: [\n                    [bounds[0], bounds[1]],\n                    [bounds[2], bounds[3]],\n                  ] as [[number, number], [number, number]],\n                  minZoom: 7,\n                  maxZoom: 9,\n                  metadata: {\n                    whatIsThat: 'foo',\n                  },\n                },\n                (_region, status) => {\n                  setProgress(status?.percentage ?? 0);\n                },\n                (pack, error) => {\n                  setProgress(0);\n                  if (error) {\n                    Alert.alert('Offline Error', formatError(error));\n                  }\n                  console.log('=> callback pack:', pack, 'error:', error);\n                },\n              );\n            } catch (error) {\n              Alert.alert('Offline Error', formatError(error));\n              console.error('#Error creating pack:', error);\n            }\n          })();\n        }}\n      />\n      <View style={{ marginVertical: 8 }}>\n        <LinearProgress\n          variant=\"determinate\"\n          value={progress / 100}\n          color=\"primary\"\n        />\n      </View>\n      <Button\n        title=\"Center to Offline Location\"\n        onPress={() => {\n          cameraRef.current?.setCamera({\n            centerCoordinate: CENTER,\n            zoomLevel: 7.5,\n            heading: 162,\n            pitch: 0,\n            animationDuration: 1000,\n          });\n        }}\n      />\n    </View>\n  );\n}\n\nexport default function OfflineTilesets() {\n  const cameraRef = React.useRef<Camera>(null);\n  return (\n    <>\n      <Menu cameraRef={cameraRef} />\n      <MapView style={{ flex: 1 }} styleURL={STYLE_URL}>\n        <Camera\n          ref={cameraRef}\n          defaultSettings={{\n            centerCoordinate: [0, 0], //CENTER,\n            zoomLevel: 12.3,\n            heading: 162,\n            pitch: 76,\n          }}\n        />\n        {/* Bounds visualization */}\n        <ShapeSource\n          id=\"bounds-source\"\n          shape={\n            {\n              type: 'Feature',\n              geometry: {\n                type: 'LineString',\n                coordinates: [\n                  [bounds[0], bounds[1]],\n                  [bounds[0], bounds[3]],\n                  [bounds[2], bounds[3]],\n                  [bounds[2], bounds[1]],\n                  [bounds[0], bounds[1]],\n                ],\n              },\n              properties: {},\n            } as const\n          }\n        >\n          <LineLayer\n            id=\"bounds-line\"\n            style={{\n              lineColor: '#FF0000',\n              lineWidth: 3,\n              lineOpacity: 0.8,\n            }}\n          />\n        </ShapeSource>\n\n        <VectorSource\n          id=\"countryShapeSource\"\n          url=\"mapbox://mapbox.country-boundaries-v1\"\n        >\n          <LineLayer\n            id=\"countryFillLayer\"\n            sourceLayerID=\"country_boundaries\" // Check the source's layer name with Mapbox Studio or the Mapbox API for the\n            existing\n            style={{\n              lineColor: '#0000FF',\n              lineWidth: 8,\n              lineOpacity: 0.8,\n            }}\n          />\n        </VectorSource>\n      </MapView>\n    </>\n  );\n}\n\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"OfflineTilesets.png",src:r(5310).Z+"",width:"295",height:"640"}),"}"]})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},5310:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/OfflineTilesets-20e68d6c57ec7fe71936a64e2d3ef7ff.png"},1151:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>o});var t=r(7294);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);