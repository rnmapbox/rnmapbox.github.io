"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[4530],{2785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(5893),r=t(1151);const s={title:"Draw Polyline",tags:["LineLayer","ShapeSource","onCameraChanged","getCoordinateFromView","Overlay"],custom_props:{example_rel_path:"LineLayer/DrawPolyline.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/LineLayer/DrawPolyline.tsx"},a=void 0,i={id:"examples/LineLayer/DrawPolyline",title:"Draw Polyline",description:"This example shows a simple polyline editor. It uses onCameraChanged to get the center of the map and getCoordinateFromView",source:"@site/docs/examples/LineLayer/DrawPolyline.md",sourceDirName:"examples/LineLayer",slug:"/examples/LineLayer/DrawPolyline",permalink:"/docs/examples/LineLayer/DrawPolyline",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/LineLayer/DrawPolyline.tsx",tags:[{inline:!0,label:"LineLayer",permalink:"/docs/tags/line-layer"},{inline:!0,label:"ShapeSource",permalink:"/docs/tags/shape-source"},{inline:!0,label:"onCameraChanged",permalink:"/docs/tags/on-camera-changed"},{inline:!0,label:"getCoordinateFromView",permalink:"/docs/tags/get-coordinate-from-view"},{inline:!0,label:"Overlay",permalink:"/docs/tags/overlay"}],version:"current",frontMatter:{title:"Draw Polyline",tags:["LineLayer","ShapeSource","onCameraChanged","getCoordinateFromView","Overlay"],custom_props:{example_rel_path:"LineLayer/DrawPolyline.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/LineLayer/DrawPolyline.tsx"},sidebar:"examplesSidebar",previous:{title:"Watercolor Raster Tiles",permalink:"/docs/examples/FillRasterLayer/WatercolorRasterTiles"},next:{title:"Gradient Line",permalink:"/docs/examples/LineLayer/GradientLine"}},l={},c=[];function d(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This example shows a simple polyline editor. It uses ",(0,o.jsx)(n.code,{children:"onCameraChanged"})," to get the center of the map and ",(0,o.jsx)(n.code,{children:"getCoordinateFromView"}),"\nto get the coordinates of the crosshair."]}),"\n",(0,o.jsxs)(n.p,{children:["The crosshair is an overlay that is positioned using ",(0,o.jsx)(n.code,{children:"onLayout"})," and ",(0,o.jsx)(n.code,{children:"getCoordinateFromView"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ShapeSource"})," is updated with the new coordinates and the ",(0,o.jsx)(n.code,{children:"LineLayer"})," is updated with the new coordinates."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { Camera, LineLayer, MapView, ShapeSource } from '@rnmapbox/maps';\nimport { Button, View } from 'react-native';\nimport React, {\n  useState,\n  useRef,\n  ComponentProps,\n  useMemo,\n  forwardRef,\n} from 'react';\n\ntype Position = [number, number];\n\ntype CrosshairProps = {\n  size: number;\n  w: number;\n  onLayout: ComponentProps<typeof View>['onLayout'];\n};\nconst Crosshair = forwardRef<View, CrosshairProps>(\n  ({ size, w, onLayout }: CrosshairProps, ref) => (\n    <View\n      onLayout={onLayout}\n      ref={ref}\n      style={{\n        width: 2 * size + 1,\n        height: 2 * size + 1,\n      }}\n    >\n      <View\n        style={{\n          position: 'absolute',\n          left: size,\n          top: 0,\n          bottom: 0,\n          borderColor: 'red',\n          borderWidth: w / 2.0,\n        }}\n      />\n      <View\n        style={{\n          position: 'absolute',\n          top: size,\n          left: 0,\n          right: 0,\n          borderColor: 'red',\n          borderWidth: w / 2.0,\n        }}\n      />\n    </View>\n  ),\n);\n\nconst CrosshairOverlay = ({\n  onCenter,\n}: {\n  onCenter: (x: [number, number]) => void;\n}) => {\n  const ref = useRef<View>(null);\n\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      pointerEvents=\"none\"\n    >\n      <Crosshair\n        size={20}\n        w={1.0}\n        ref={ref}\n        onLayout={(e) => {\n          const { x, y, width, height } = e.nativeEvent.layout;\n          onCenter([x + width / 2.0, y + height / 2.0]);\n        }}\n      />\n    </View>\n  );\n};\n\nconst lineLayerStyle = {\n  lineColor: '#ff0000',\n};\n\nconst Polygon = ({ coordinates }: { coordinates: Position[] }) => {\n  const features: GeoJSON.FeatureCollection = useMemo(() => {\n    return {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          id: 'a-feature',\n          geometry: {\n            type: 'LineString',\n            coordinates,\n          },\n          properties: {},\n        } as const,\n      ],\n    };\n  }, [coordinates]);\n  console.log('=> features', JSON.stringify(features));\n  return (\n    <ShapeSource id={'shape-source-id-0'} shape={features}>\n      <LineLayer id={'line-layer'} style={lineLayerStyle} />\n    </ShapeSource>\n  );\n};\n\nconst DrawPolyline = () => {\n  const [coordinates, setCoordinates] = useState<Position[]>([]);\n  const [lastCoordinate, setLastCoordinate] = useState<Position>([0, 0]);\n  const [started, setStarted] = useState(false);\n  const [crosshairPos, setCrosshairPos] = useState([0, 0]);\n\n  const coordinatesWithLast = useMemo(() => {\n    return [...coordinates, lastCoordinate];\n  }, [coordinates, lastCoordinate]);\n\n  const map = useRef<MapView>(null);\n\n  const newLocal = 'row';\n  return (\n    <View style={{ flex: 1 }}>\n      <View>\n        {!started ? (\n          <Button\n            title=\"start\"\n            onPress={() => {\n              setStarted(true);\n              setCoordinates([lastCoordinate]);\n            }}\n          />\n        ) : (\n          <View\n            style={{\n              flexDirection: newLocal,\n              justifyContent: 'center',\n              gap: 10,\n            }}\n          >\n            <Button\n              title=\"add\"\n              onPress={() => setCoordinates([...coordinates, lastCoordinate])}\n            />\n            <Button title=\"stop\" onPress={() => setStarted(false)} />\n          </View>\n        )}\n      </View>\n      <View style={{ flex: 1 }}>\n        <MapView\n          ref={map}\n          style={{ flex: 1 }}\n          onCameraChanged={async (e) => {\n            const crosshairCoords = await map.current?.getCoordinateFromView(\n              crosshairPos,\n            );\n            console.log(\n              'Crosshair coords: ',\n              crosshairCoords,\n              'camera center:',\n              e.properties.center,\n            );\n            setLastCoordinate(crosshairCoords as Position);\n            if (crosshairCoords && started) {\n              setLastCoordinate(crosshairCoords as Position);\n            }\n          }}\n        >\n          {started && <Polygon coordinates={coordinatesWithLast} />}\n          <Camera\n            defaultSettings={{\n              centerCoordinate: [-73.970895, 40.723279],\n              zoomLevel: 12,\n            }}\n          />\n        </MapView>\n        <CrosshairOverlay onCenter={(c) => setCrosshairPos(c)} />\n      </View>\n    </View>\n  );\n};\n\nexport default DrawPolyline;\n\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{alt:"DrawPolyline.png",src:t(1108).Z+"",width:"295",height:"640"}),"}"]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1108:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/DrawPolyline-1db875dd28c31617faca0ae4ff9a6320.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var o=t(7294);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);