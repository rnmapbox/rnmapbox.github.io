"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[7891],{9925:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var t=a(5893),o=a(1151);const s={title:"Shape Source Icons",tags:["ShapeSource","SymbolLayer","Images","Images#nativeAssetImages","Images#onImageMissing"],custom_props:{example_rel_path:"SymbolCircleLayer/ShapeSourceIcon.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/ShapeSourceIcon.tsx"},r=void 0,i={id:"examples/SymbolCircleLayer/ShapeSourceIcon",title:"Shape Source Icons",description:"Render icons with various methods.",source:"@site/docs/examples/SymbolCircleLayer/ShapeSourceIcon.md",sourceDirName:"examples/SymbolCircleLayer",slug:"/examples/SymbolCircleLayer/ShapeSourceIcon",permalink:"/docs/examples/SymbolCircleLayer/ShapeSourceIcon",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/ShapeSourceIcon.tsx",tags:[{inline:!0,label:"ShapeSource",permalink:"/docs/tags/shape-source"},{inline:!0,label:"SymbolLayer",permalink:"/docs/tags/symbol-layer"},{inline:!0,label:"Images",permalink:"/docs/tags/images"},{inline:!0,label:"Images#nativeAssetImages",permalink:"/docs/tags/images-native-asset-images"},{inline:!0,label:"Images#onImageMissing",permalink:"/docs/tags/images-on-image-missing"}],version:"current",frontMatter:{title:"Shape Source Icons",tags:["ShapeSource","SymbolLayer","Images","Images#nativeAssetImages","Images#onImageMissing"],custom_props:{example_rel_path:"SymbolCircleLayer/ShapeSourceIcon.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/ShapeSourceIcon.tsx"},sidebar:"examplesSidebar",previous:{title:"Scaleable images",permalink:"/docs/examples/SymbolCircleLayer/ScalableImages"},next:{title:"Custom Native UserLocation",permalink:"/docs/examples/UserLocation/CustomNativeUserLocation"}},c={},m=[];function l(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Render icons with various methods."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"pin-rn: Rendered with a React Native View"}),"\n",(0,t.jsx)(n.li,{children:"pin: Rendered with a native asset image"}),"\n",(0,t.jsx)(n.li,{children:"pin3: Resolved as a result of onImageMissing"}),"\n",(0,t.jsx)(n.li,{children:"example: Rendered with a js asset image (require)"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport {\n  MapView,\n  Images,\n  Camera,\n  Image,\n  SymbolLayer,\n  ShapeSource,\n} from '@rnmapbox/maps';\nimport { StyleProp, Text, ViewStyle } from 'react-native';\nimport { FeatureCollection } from 'geojson';\n\nimport exampleIcon from '../../assets/example.png';\nimport pinIcon from '../../assets/pin.png';\nimport { SymbolLayerStyleProps } from '../../../../src/utils/MapboxStyles';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata';\n\nconst styles: {\n  icon: SymbolLayerStyleProps;\n  matchParent: StyleProp<ViewStyle>;\n} = {\n  icon: {\n    iconImage: ['get', 'icon'],\n\n    iconSize: [\n      'match',\n      ['get', 'icon'],\n      'example',\n      1.2,\n      'airport-15',\n      1.2,\n      /* default */ 1,\n    ],\n    iconAllowOverlap: true,\n  },\n  matchParent: { flex: 1 },\n};\n\nconst featureCollection: FeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      id: '9d10456e-bdda-4aa9-9269-04c1667d4552',\n      properties: {\n        icon: 'example',\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [-117.20611157485, 52.180961084261],\n      },\n    },\n    {\n      type: 'Feature',\n      id: '9d10456e-bdda-4aa9-9269-04c1667d4552',\n      properties: {\n        icon: 'airport-15',\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [-117.205908, 52.180843],\n      },\n    },\n    {\n      type: 'Feature',\n      id: '9d10456e-bdda-4aa9-9269-04c1667d4552',\n      properties: {\n        icon: 'pin',\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [-117.206562, 52.180797],\n      },\n    },\n    {\n      type: 'Feature',\n      id: '9d10456e-bdda-4aa9-9269-04c1667d4553',\n      properties: {\n        icon: 'pin3',\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [-117.206862, 52.180897],\n      },\n    },\n    {\n      type: 'Feature',\n      id: '9d10456e-bdda-4aa9-9269-04c1667d4555',\n      properties: {\n        icon: 'pin-rn',\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [-117.205862, 52.180697],\n      },\n    },\n  ],\n};\n\nclass ShapeSourceIcon extends React.Component {\n  state = {\n    images: {\n      example: exampleIcon,\n    },\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <MapView style={styles.matchParent}>\n        <Camera\n          defaultSettings={{\n            zoomLevel: 16,\n            centerCoordinate: [-117.20611157485, 52.180961084261],\n          }}\n        />\n        <Images\n          nativeAssetImages={['pin']}\n          images={images}\n          onImageMissing={(imageKey) => {\n            if (imageKey !== 'pin-rn') {\n              this.setState({\n                images: { ...this.state.images, [imageKey]: pinIcon },\n              });\n            }\n          }}\n        >\n          <Image name=\"pin-rn\">\n            <Text\n              style={{\n                fontWeight: 'bold',\n                textAlign: 'center',\n                color: 'white',\n                borderRadius: 10,\n                backgroundColor: 'gray',\n                padding: 8,\n                margin: 16,\n                width: 100,\n                shadowOffset: { width: 0, height: 8 },\n                shadowOpacity: 0.2,\n              }}\n            >\n              RN Pin 3\n            </Text>\n          </Image>\n        </Images>\n        <ShapeSource id=\"exampleShapeSource\" shape={featureCollection}>\n          <SymbolLayer id=\"exampleIconName\" style={styles.icon} />\n        </ShapeSource>\n      </MapView>\n    );\n  }\n}\n\nexport default ShapeSourceIcon;\n\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"ShapeSourceIcon.png",src:a(4373).Z+"",width:"295",height:"640"}),"}"]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},4373:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/ShapeSourceIcon-bce67e843ecf29bbec400c30ac0ad6b0.png"},1151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>r});var t=a(7294);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);