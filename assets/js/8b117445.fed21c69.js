"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[4082],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>y});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),c=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),u=o,y=d["".concat(i,".").concat(u)]||d[u]||m[u]||s;return r?t.createElement(y,a(a({ref:n},p),{},{components:r})):t.createElement(y,a({ref:n},p))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=u;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<s;c++)a[c]=r[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9242:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=r(7462),o=(r(7294),r(3905));const s={title:"Markers",tags:["MarkerView"],custom_props:{example_rel_path:"V10/Markers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/Markers.tsx"},a=void 0,l={unversionedId:"examples/V10/Markers",id:"examples/V10/Markers",title:"Markers",description:"Test view for MarkerViews",source:"@site/docs/examples/V10/Markers.md",sourceDirName:"examples/V10",slug:"/examples/V10/Markers",permalink:"/docs/examples/V10/Markers",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/Markers.tsx",tags:[{label:"MarkerView",permalink:"/docs/tags/marker-view"}],version:"current",frontMatter:{title:"Markers",tags:["MarkerView"],custom_props:{example_rel_path:"V10/Markers.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/Markers.tsx"},sidebar:"examplesSidebar",previous:{title:"Map Handlers",permalink:"/docs/examples/V10/MapHandlers"},next:{title:"Query Terrain Elevation",permalink:"/docs/examples/V10/QueryTerrainElevation"}},i={},c=[],p={toc:c},d="wrapper";function m(e){let{components:n,...s}=e;return(0,o.kt)(d,(0,t.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Test view for MarkerViews"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Button, Divider, Text } from '@rneui/base';\nimport { Camera, Logger, MapView, MarkerView } from '@rnmapbox/maps';\nimport { Position } from 'geojson';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport { Pressable, StyleSheet, View } from 'react-native';\n\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nLogger.setLogLevel('verbose');\n\ntype MarkerConfig = {\n  coords: Position;\n  color: string;\n};\n\nconst markerCount = 20;\nconst centerCoord = [-73.99155, 40.72];\nconst allColors = ['red', 'green', 'blue', 'purple'];\n\nconst Markers = () => {\n  const [markers, setMarkers] = useState<MarkerConfig[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState<number | undefined>();\n  const [anchor, setAnchor] = useState({ x: 0.5, y: 0.5 });\n  const [allowOverlap, setAllowOverlap] = useState(true);\n\n  const [show, setShow] = useState(true);\n  const [size, setSize] = useState(1);\n\n  const randomizeCoordinatesAndColors = useCallback(() => {\n    const newMarkers = new Array(markerCount).fill(0).map((o, i) => {\n      return {\n        coords: [\n          centerCoord[0] + (Math.random() - 0.5) * 0.008,\n          centerCoord[1] + (Math.random() - 0.5) * 0.008,\n        ],\n        color: allColors[i % allColors.length],\n      };\n    });\n\n    setMarkers(newMarkers);\n  }, []);\n\n  useEffect(() => {\n    randomizeCoordinatesAndColors();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <MapView style={{ flex: 1 }}>\n        <Camera\n          defaultSettings={{ centerCoordinate: centerCoord, zoomLevel: 14 }}\n          centerCoordinate={centerCoord}\n          zoomLevel={14}\n        />\n\n        {markers.map((marker, i) => {\n          return (\n            <MarkerView\n              key={`MarkerView-${marker.coords.join('-')}`}\n              coordinate={marker.coords}\n              anchor={anchor}\n              allowOverlap={allowOverlap}\n              isSelected={i === selectedIndex}\n              style={{ display: show ? 'flex' : 'none' }}\n            >\n              <Pressable\n                style={[\n                  styles.markerBox,\n                  { backgroundColor: marker.color, padding: 4 * size },\n                ]}\n                onPress={() =>\n                  setSelectedIndex((index) => (index === i ? -1 : i))\n                }\n              >\n                <Text style={styles.markerText}>Marker {i + 1}</Text>\n              </Pressable>\n            </MarkerView>\n          );\n        })}\n      </MapView>\n\n      <View style={styles.buttonsHolder}>\n        <Button\n          style={styles.button}\n          title={'Rearrange'}\n          onPress={randomizeCoordinatesAndColors}\n        />\n\n        <Divider style={styles.divider} />\n\n        <View>\n          {[\n            [\n              [0, 0],\n              [0.5, 0],\n              [1, 0],\n            ],\n            [\n              [0, 0.5],\n              [0.5, 0.5],\n              [1, 0.5],\n            ],\n            [\n              [0, 1],\n              [0.5, 1],\n              [1, 1],\n            ],\n          ].map((anchors, index) => {\n            return (\n              <View\n                key={index}\n                style={{\n                  flex: 0,\n                  flexDirection: 'row',\n                  justifyContent: 'space-between',\n                }}\n              >\n                {anchors.map(([x, y]) => {\n                  const isSelected = anchor.x === x && anchor.y === y;\n                  return (\n                    <View key={`${x}-${y}`}>\n                      <Button\n                        type={isSelected ? 'solid' : 'outline'}\n                        style={styles.button}\n                        title={`${x}, ${y}`}\n                        onPress={() => setAnchor({ x, y })}\n                      />\n                    </View>\n                  );\n                })}\n              </View>\n            );\n          })}\n        </View>\n\n        <Divider style={styles.divider} />\n\n        <Button\n          style={styles.button}\n          title={show ? 'Hide markers' : 'Show markers'}\n          onPress={() => {\n            setShow(!show);\n          }}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Button\n          style={styles.button}\n          title={allowOverlap ? 'Disallow overlap' : 'Allow overlap'}\n          onPress={() => {\n            setAllowOverlap(!allowOverlap);\n          }}\n        />\n\n        <Divider style={styles.divider} />\n\n        <View\n          style={{\n            flex: 0,\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Button\n            style={styles.button}\n            title={'Decrease size'}\n            onPress={() => {\n              setSize((s) => s - 1);\n            }}\n          />\n          <Button\n            style={styles.button}\n            title={'Increase size'}\n            onPress={() => {\n              setSize((s) => s + 1);\n            }}\n          />\n        </View>\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  markerBox: {\n    flex: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 6,\n    padding: 4,\n    borderWidth: 2,\n    borderColor: 'white',\n  },\n  markerBoxSelected: {\n    padding: 12,\n  },\n  markerText: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold',\n  },\n  buttonsHolder: {\n    flex: 0,\n    marginBottom: 20,\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n  },\n  button: {\n    flex: 0,\n    alignSelf: 'stretch',\n  },\n  divider: {\n    marginVertical: 10,\n  },\n});\n\nexport default Markers;\n\n\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Markers.png",src:r(7174).Z,width:"295",height:"640"}),"}"))}m.isMDXComponent=!0},7174:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/Markers-f6309f6235a44351b0ea2c746d2e3185.png"}}]);