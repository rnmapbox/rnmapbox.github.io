"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[3316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),y=o,d=u["".concat(i,".").concat(y)]||u[y]||m[y]||s;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=y;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const s={title:"Query Features Bounding Box",tags:[],custom_props:{example_rel_path:"FillRasterLayer/QueryWithRect.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QueryWithRect.js"},a=void 0,l={unversionedId:"examples/FillRasterLayer/QueryWithRect",id:"examples/FillRasterLayer/QueryWithRect",title:"Query Features Bounding Box",description:"QueryWithRect.png}",source:"@site/docs/examples/FillRasterLayer/QueryWithRect.md",sourceDirName:"examples/FillRasterLayer",slug:"/examples/FillRasterLayer/QueryWithRect",permalink:"/docs/examples/FillRasterLayer/QueryWithRect",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QueryWithRect.js",tags:[],version:"current",frontMatter:{title:"Query Features Bounding Box",tags:[],custom_props:{example_rel_path:"FillRasterLayer/QueryWithRect.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QueryWithRect.js"},sidebar:"examplesSidebar",previous:{title:"Query Source Features",permalink:"/docs/examples/FillRasterLayer/QuerySourceFeatures"},next:{title:"Raster Source",permalink:"/docs/examples/FillRasterLayer/RasterSource"}},i={},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Text } from 'react-native';\nimport MapboxGL from '@rnmapbox/maps';\n\nimport sheet from '../../styles/sheet';\nimport nycJSON from '../../assets/nyc_geojson.json';\nimport BaseExamplePropTypes from '../common/BaseExamplePropTypes';\nimport Page from '../common/Page';\nimport Bubble from '../common/Bubble';\n\nconst styles = {\n  neighborhoods: {\n    fillAntialias: true,\n    fillColor: 'blue',\n    fillOutlineColor: 'black',\n    fillOpacity: 0.84,\n  },\n  selectedNeighborhoods: {\n    fillAntialias: true,\n    fillColor: 'green',\n    fillOpacity: 0.84,\n  },\n  bubbleText: { textAlign: 'center' },\n};\n\nclass QueryWithRect extends React.Component {\n  static propTypes = {\n    ...BaseExamplePropTypes,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      screenCoords: [],\n      selectedGeoJSON: null,\n    };\n\n    this.onPress = this.onPress.bind(this);\n  }\n\n  async onPress(e) {\n    const { screenPointX, screenPointY } = e.properties;\n\n    const screenCoords = Object.assign([], this.state.screenCoords);\n    screenCoords.push([screenPointX, screenPointY]);\n\n    if (screenCoords.length === 2) {\n      const featureCollection = await this._map.queryRenderedFeaturesInRect(\n        this.getBoundingBox(screenCoords),\n        null,\n        ['nycFill'],\n      );\n\n      this.setState({\n        screenCoords: [],\n        selectedGeoJSON: featureCollection.features.length\n          ? featureCollection\n          : null,\n      });\n    } else {\n      this.setState({ screenCoords });\n    }\n  }\n\n  getBoundingBox(screenCoords) {\n    const maxX = Math.max(screenCoords[0][0], screenCoords[1][0]);\n    const minX = Math.min(screenCoords[0][0], screenCoords[1][0]);\n    const maxY = Math.max(screenCoords[0][1], screenCoords[1][1]);\n    const minY = Math.min(screenCoords[0][1], screenCoords[1][1]);\n    // Rect -> [top, right, bottom, left]\n    return [minY, maxX, maxY, minX];\n  }\n\n  get message() {\n    if (this.state.screenCoords.length === 1) {\n      return 'Press in one more location to close the rect';\n    }\n    return 'Press in two different locations to form a rect to query with';\n  }\n\n  render() {\n    return (\n      <Page {...this.props}>\n        <MapboxGL.MapView\n          ref={(c) => (this._map = c)}\n          onPress={this.onPress}\n          style={sheet.matchParent}\n          styleURL={MapboxGL.StyleURL.Light}\n        >\n          <MapboxGL.Camera\n            zoomLevel={9}\n            centerCoordinate={[-73.970895, 40.723279]}\n          />\n\n          <MapboxGL.ShapeSource id=\"nyc\" shape={nycJSON}>\n            <MapboxGL.FillLayer id=\"nycFill\" style={styles.neighborhoods} />\n          </MapboxGL.ShapeSource>\n\n          {this.state.selectedGeoJSON ? (\n            <MapboxGL.ShapeSource\n              id=\"selectedNYC\"\n              shape={this.state.selectedGeoJSON}\n            >\n              <MapboxGL.FillLayer\n                id=\"selectedNYCFill\"\n                style={styles.selectedNeighborhoods}\n              />\n            </MapboxGL.ShapeSource>\n          ) : null}\n        </MapboxGL.MapView>\n\n        <Bubble>\n          <Text style={styles.bubbleText}>{this.message}</Text>\n        </Bubble>\n      </Page>\n    );\n  }\n}\n\nexport default QueryWithRect;\n\n\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"QueryWithRect.png",src:n(4706).Z,width:"295",height:"640"}),"}"))}m.isMDXComponent=!0},4706:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/QueryWithRect-c562e45afb44daa5d500fa5b6d39e9e2.png"}}]);