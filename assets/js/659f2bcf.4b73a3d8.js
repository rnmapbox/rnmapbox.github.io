"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[4850],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>w});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=i(r),u=a,w=m["".concat(p,".").concat(u)]||m[u]||y[u]||o;return r?n.createElement(w,l(l({ref:t},c),{},{components:r})):n.createElement(w,l({ref:t},c))}));function w(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4223:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const o={title:"Two Map Views",tags:["MapView"],custom_props:{example_rel_path:"Map/TwoByTwo.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/TwoByTwo.js"},l=void 0,s={unversionedId:"examples/Map/TwoByTwo",id:"examples/Map/TwoByTwo",title:"Two Map Views",description:"Display two map views side by side",source:"@site/docs/examples/Map/TwoByTwo.md",sourceDirName:"examples/Map",slug:"/examples/Map/TwoByTwo",permalink:"/docs/examples/Map/TwoByTwo",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/TwoByTwo.js",tags:[{label:"MapView",permalink:"/docs/tags/map-view"}],version:"current",frontMatter:{title:"Two Map Views",tags:["MapView"],custom_props:{example_rel_path:"Map/TwoByTwo.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/TwoByTwo.js"},sidebar:"examplesSidebar",previous:{title:"Style JSON",permalink:"/docs/examples/Map/StyleJson"},next:{title:"Custom Icon",permalink:"/docs/examples/SymbolCircleLayer/CustomIcon"}},p={},i=[],c={toc:i},m="wrapper";function y(e){let{components:t,...o}=e;return(0,a.kt)(m,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Display two map views side by side"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { MapView, ShapeSource, FillLayer, StyleURL } from '@rnmapbox/maps';\n\nimport sheet from '../../styles/sheet';\nimport smileyFaceGeoJSON from '../../assets/smiley_face.json';\n\nconst layerStyles = {\n  smileyFaceLight: {\n    fillAntialias: true,\n    fillColor: 'white',\n    fillOutlineColor: 'rgba(255, 255, 255, 0.84)',\n  },\n  smileyFaceDark: {\n    fillAntialias: true,\n    fillColor: 'black',\n    fillOutlineColor: 'rgba(0, 0, 0, 0.84)',\n  },\n};\n\nclass TwoByTwo extends React.Component {\n  renderMap(styleURL, layerStyle) {\n    return (\n      <MapView\n        zoomLevel={2}\n        centerCoordinate={[-35.15165038, 40.6235728]}\n        onSetCameraComplete={this.onUpdateZoomLevel}\n        ref={(ref) => (this.map = ref)}\n        style={sheet.matchParent}\n        styleURL={styleURL}\n      >\n        <ShapeSource id=\"smileyFaceSource\" shape={smileyFaceGeoJSON}>\n          <FillLayer id=\"smileyFaceFill\" style={layerStyle} />\n        </ShapeSource>\n      </MapView>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderMap(StyleURL.Light, layerStyles.smileyFaceDark)}\n        {this.renderMap(StyleURL.Dark, layerStyles.smileyFaceLight)}\n      </>\n    );\n  }\n}\n\nexport default TwoByTwo;\n\n/** @type ExampleWithMetadata['metadata'] */\nconst metadata = {\n  title: 'Two Map Views',\n  tags: ['MapView'],\n  docs: `\nDisplay two map views side by side\n`,\n};\nTwoByTwo.metadata = metadata;\n\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"TwoByTwo.png",src:r(8577).Z,width:"295",height:"640"}),"}"))}y.isMDXComponent=!0},8577:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/TwoByTwo-3aa40d4674c3e2e91b4d3252611e90b4.png"}}]);