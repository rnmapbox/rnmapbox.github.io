"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[7536],{3861:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=t(5893),a=t(1151);const i={title:"Camera Animation",tags:["Camera","Camera#animationMode"],custom_props:{example_rel_path:"V10/CameraAnimation.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/CameraAnimation.tsx"},s=void 0,r={id:"examples/V10/CameraAnimation",title:"Camera Animation",description:"Camera animation modes",source:"@site/docs/examples/V10/CameraAnimation.md",sourceDirName:"examples/V10",slug:"/examples/V10/CameraAnimation",permalink:"/docs/examples/V10/CameraAnimation",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/CameraAnimation.tsx",tags:[{inline:!0,label:"Camera",permalink:"/docs/tags/camera"},{inline:!0,label:"Camera#animationMode",permalink:"/docs/tags/camera-animation-mode"}],version:"current",frontMatter:{title:"Camera Animation",tags:["Camera","Camera#animationMode"],custom_props:{example_rel_path:"V10/CameraAnimation.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/CameraAnimation.tsx"},sidebar:"examplesSidebar",previous:{title:"User Location Updates",permalink:"/docs/examples/UserLocation/UserLocationUpdates"},next:{title:"Feature State",permalink:"/docs/examples/V10/FeatureState"}},l={},d=[];function m(n){const e={code:"code",img:"img",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Camera animation modes"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"import { CheckBox, Divider, Slider, Button } from '@rneui/base';\nimport {\n  Camera,\n  CameraAnimationMode,\n  CameraBounds,\n  CircleLayer,\n  Logger,\n  MapView,\n  ShapeSource,\n} from '@rnmapbox/maps';\nimport bbox from '@turf/bbox';\nimport { Feature, Point, Position } from 'geojson';\nimport { useCallback, useMemo, useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport colors from '../../styles/colors';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nLogger.setLogLevel('verbose');\n\ntype Coordinate = {\n  longitude: number;\n  latitude: number;\n};\n\nconst mapStyles = {\n  circle: {\n    circleRadius: 6,\n    circleColor: colors.primary.blue,\n  },\n};\n\nconst initialCoordinate: Coordinate = {\n  latitude: 40.759211,\n  longitude: -73.984638,\n};\n\nconst toPosition = (coordinate: Coordinate): Position => {\n  return [coordinate.longitude, coordinate.latitude];\n};\n\nconst rand = () => Math.random() * 0.008;\n\nconst CameraAnimation = () => {\n  const [easing, setEasing] = useState<CameraAnimationMode>('easeTo');\n  const [coordinates, setCoordinates] = useState<Coordinate[]>([\n    initialCoordinate,\n  ]);\n  const [paddingLeft, setPaddingLeft] = useState(0);\n  const [paddingRight, setPaddingRight] = useState(0);\n  const [paddingTop, setPaddingTop] = useState(0);\n  const [paddingBottom, setPaddingBottom] = useState(0);\n  const [zoom, setZoom] = useState(10);\n  const [minZoom, setMinZoom] = useState<number | undefined>(undefined);\n  const [maxZoom, setMaxZoom] = useState<number | undefined>(undefined);\n\n  const move = useCallback((kind: 'center' | 'bounds') => {\n    if (kind === 'bounds') {\n      const _centerCoordinate = {\n        latitude: initialCoordinate.latitude + rand(),\n        longitude: initialCoordinate.longitude + rand(),\n      };\n      const _coordinates = Array(10)\n        .fill(0)\n        .map((_) => {\n          return {\n            latitude: _centerCoordinate.latitude + rand(),\n            longitude: _centerCoordinate.longitude + rand(),\n          };\n        });\n      setCoordinates(_coordinates);\n    } else if (kind === 'center') {\n      setCoordinates([\n        {\n          latitude: initialCoordinate.latitude + rand(),\n          longitude: initialCoordinate.longitude + rand(),\n        },\n      ]);\n    }\n  }, []);\n\n  const features = useMemo((): Feature<Point>[] => {\n    return coordinates.map((p) => {\n      const feature: Feature<Point> = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: toPosition(p),\n        },\n        properties: {},\n      };\n      return feature;\n    });\n  }, [coordinates]);\n\n  const centerOrBounds = useMemo((): {\n    centerCoordinate?: Position;\n    bounds?: CameraBounds;\n  } => {\n    if (coordinates.length === 1) {\n      return {\n        centerCoordinate: toPosition(coordinates[0]!),\n      };\n    } else {\n      const positions = coordinates.map(toPosition);\n      const lineString = {\n        type: 'Feature',\n        geometry: {\n          type: 'LineString',\n          coordinates: positions,\n        },\n        properties: {},\n      } as const;\n      const _bbox = bbox(lineString);\n      return {\n        bounds: {\n          ne: [_bbox[0], _bbox[1]],\n          sw: [_bbox[2], _bbox[3]],\n        },\n      };\n    }\n  }, [coordinates]);\n\n  const easingCheckBox = useCallback(\n    (value: CameraAnimationMode, label: string) => {\n      const isChecked = value === easing;\n      return (\n        <View\n          style={{\n            flex: 0,\n            flexDirection: 'row',\n            alignItems: 'center',\n          }}\n        >\n          <CheckBox\n            checked={isChecked}\n            center={true}\n            onIconPress={() => setEasing(value)}\n            containerStyle={{\n              backgroundColor: 'transparent',\n              marginRight: -4,\n            }}\n          />\n          <Text\n            style={{\n              flex: 0,\n              color: isChecked ? colors.primary.blue : undefined,\n            }}\n          >\n            {label}\n          </Text>\n        </View>\n      );\n    },\n    [easing],\n  );\n\n  const zoomCounter = useMemo(() => {\n    const disabled = coordinates.length > 1;\n\n    return (\n      <View style={{ flex: 1, paddingHorizontal: 10 }}>\n        <View style={{ flex: 0, alignItems: 'center' }}>\n          <Text style={{ fontWeight: 'bold', opacity: disabled ? 0.4 : 1 }}>\n            {zoom}\n          </Text>\n        </View>\n        <Slider\n          thumbStyle={[\n            styles.thumb,\n            { backgroundColor: disabled ? 'lightgray' : 'black' },\n          ]}\n          trackStyle={{ opacity: disabled ? 0.1 : 1 }}\n          value={zoom}\n          disabled={disabled}\n          minimumValue={1}\n          maximumValue={20}\n          onSlidingComplete={(_value) => {\n            setZoom(Math.round(_value));\n          }}\n        />\n      </View>\n    );\n  }, [coordinates.length, zoom]);\n\n  const paddingCounter = useCallback(\n    (value: number, setValue: (value: number) => void, label: string) => {\n      return (\n        <View style={{ flex: 1, paddingHorizontal: 10 }}>\n          <View style={{ flex: 0, alignItems: 'center' }}>\n            <Text>{label}</Text>\n            <Text style={{ fontWeight: 'bold' }}>{`${Math.round(value)}`}</Text>\n          </View>\n          <Slider\n            thumbStyle={styles.thumb}\n            value={value}\n            minimumValue={0}\n            maximumValue={500}\n            onSlidingComplete={(_value) => setValue(_value)}\n          />\n        </View>\n      );\n    },\n    [],\n  );\n\n  const zoomLimitCounter = useCallback(\n    (\n      value: number | undefined,\n      setValue: (value?: number) => void,\n      label: string,\n    ) => {\n      return (\n        <View style={{ flex: 1, paddingHorizontal: 10 }}>\n          <View style={{ flex: 0, alignItems: 'center' }}>\n            <Text>{label}</Text>\n            <Text style={{ fontWeight: 'bold' }}>\n              {`${value ?? 'Not set'}`}\n            </Text>\n          </View>\n          <Slider\n            thumbStyle={styles.thumb}\n            value={value}\n            minimumValue={-1}\n            maximumValue={20}\n            onSlidingComplete={(_value) => {\n              if (_value < 0) {\n                setValue(undefined);\n              } else {\n                setValue(Math.round(_value));\n              }\n            }}\n          />\n        </View>\n      );\n    },\n    [],\n  );\n\n  return (\n    <>\n      <MapView style={styles.map}>\n        <Camera\n          {...centerOrBounds}\n          zoomLevel={zoom}\n          minZoomLevel={minZoom}\n          maxZoomLevel={maxZoom}\n          padding={{\n            paddingTop,\n            paddingBottom,\n            paddingLeft,\n            paddingRight,\n          }}\n          animationDuration={800}\n          animationMode={easing}\n        />\n\n        {features.map((feature) => {\n          const id = JSON.stringify(feature.geometry);\n          return (\n            <ShapeSource key={id} id={`source-${id}`} shape={feature}>\n              <CircleLayer id={`layer-${id}`} style={mapStyles.circle} />\n            </ShapeSource>\n          );\n        })}\n      </MapView>\n\n      <SafeAreaView>\n        <View style={styles.sheet}>\n          <View style={styles.content}>\n            <Text style={styles.sectionText}>Coordinate</Text>\n            <View style={styles.buttonRow}>\n              <Button title=\"Center\" onPress={() => move('center')} />\n              <Button title=\"Bounds\" onPress={() => move('bounds')} />\n            </View>\n\n            <Divider style={styles.divider} />\n\n            <Text style={styles.sectionText}>Easing</Text>\n            <View style={[styles.buttonRow, { marginBottom: -6 }]}>\n              {easingCheckBox('easeTo', 'Ease')}\n              {easingCheckBox('linearTo', 'Linear')}\n              {easingCheckBox('flyTo', 'Fly')}\n              {easingCheckBox('moveTo', 'Move')}\n            </View>\n\n            <Divider style={styles.divider} />\n\n            <Text style={styles.sectionText}>Zoom</Text>\n            <View style={[styles.buttonRow, { marginBottom: -6 }]}>\n              {zoomCounter}\n            </View>\n\n            <Divider style={styles.divider} />\n\n            <Text style={styles.sectionText}>Padding</Text>\n            <View style={[styles.buttonRow, { marginTop: 6 }]}>\n              {paddingCounter(paddingTop, setPaddingTop, 'Top')}\n              {paddingCounter(paddingBottom, setPaddingBottom, 'Bottom')}\n              {paddingCounter(paddingLeft, setPaddingLeft, 'Left')}\n              {paddingCounter(paddingRight, setPaddingRight, 'Right')}\n            </View>\n\n            <Divider style={styles.divider} />\n\n            <Text style={styles.sectionText}>Zoom limits</Text>\n            <View style={[styles.buttonRow, { marginTop: 6 }]}>\n              {zoomLimitCounter(minZoom, setMinZoom, 'Min')}\n              {zoomLimitCounter(maxZoom, setMaxZoom, 'Max')}\n            </View>\n          </View>\n        </View>\n      </SafeAreaView>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  map: {\n    flex: 1,\n  },\n  sheet: {\n    paddingHorizontal: 10,\n    marginBottom: -10,\n  },\n  content: {\n    padding: 10,\n  },\n  sectionText: {\n    fontSize: 10,\n    color: 'gray',\n  },\n  buttonRow: {\n    flex: 0,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n  },\n  divider: {\n    marginVertical: 8,\n  },\n  thumb: {\n    backgroundColor: 'black',\n    width: 15,\n    height: 15,\n  },\n});\n\nexport default CameraAnimation;\n\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.img,{alt:"CameraAnimation.png",src:t(5846).Z+"",width:"295",height:"640"}),"}"]})]})}function u(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},5846:(n,e,t)=>{t.d(e,{Z:()=>o});const o=t.p+"assets/images/CameraAnimation-209a97c5462de2febb5f9c3ff3c82dd7.png"},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>s});var o=t(7294);const a={},i=o.createContext(a);function s(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);