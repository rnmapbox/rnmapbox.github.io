"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[5280],{5487:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>m});var a=t(5893),i=t(1151);const o={title:"Ornaments",tags:["MapView#logoEnabled","MapView#logoPosition","MapView#attributionEnabled","MapView#attributionPosition","MapView#compassEnabled","MapView#compassPosition","MapView#compassImage","MapView#compassFadeWhenNorth","MapView#scaleBarEnabled","MapView#scaleBarPosition"],custom_props:{example_rel_path:"Map/Ornaments.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/Ornaments.tsx"},s=void 0,r={id:"examples/Map/Ornaments",title:"Ornaments",description:"Customize ornaments of the map(logo, compass, scalebar, attribution)",source:"@site/docs/examples/Map/Ornaments.md",sourceDirName:"examples/Map",slug:"/examples/Map/Ornaments",permalink:"/docs/examples/Map/Ornaments",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/Ornaments.tsx",tags:[{inline:!0,label:"MapView#logoEnabled",permalink:"/docs/tags/map-view-logo-enabled"},{inline:!0,label:"MapView#logoPosition",permalink:"/docs/tags/map-view-logo-position"},{inline:!0,label:"MapView#attributionEnabled",permalink:"/docs/tags/map-view-attribution-enabled"},{inline:!0,label:"MapView#attributionPosition",permalink:"/docs/tags/map-view-attribution-position"},{inline:!0,label:"MapView#compassEnabled",permalink:"/docs/tags/map-view-compass-enabled"},{inline:!0,label:"MapView#compassPosition",permalink:"/docs/tags/map-view-compass-position"},{inline:!0,label:"MapView#compassImage",permalink:"/docs/tags/map-view-compass-image"},{inline:!0,label:"MapView#compassFadeWhenNorth",permalink:"/docs/tags/map-view-compass-fade-when-north"},{inline:!0,label:"MapView#scaleBarEnabled",permalink:"/docs/tags/map-view-scale-bar-enabled"},{inline:!0,label:"MapView#scaleBarPosition",permalink:"/docs/tags/map-view-scale-bar-position"}],version:"current",frontMatter:{title:"Ornaments",tags:["MapView#logoEnabled","MapView#logoPosition","MapView#attributionEnabled","MapView#attributionPosition","MapView#compassEnabled","MapView#compassPosition","MapView#compassImage","MapView#compassFadeWhenNorth","MapView#scaleBarEnabled","MapView#scaleBarPosition"],custom_props:{example_rel_path:"Map/Ornaments.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/Ornaments.tsx"},sidebar:"examplesSidebar",previous:{title:"Offline Example",permalink:"/docs/examples/Map/OfflineExample"},next:{title:"Point in Map View",permalink:"/docs/examples/Map/PointInMapView"}},p={},m=[];function l(n){const e={code:"code",img:"img",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Customize ornaments of the map(logo, compass, scalebar, attribution)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport { MapView, Camera, Images } from '@rnmapbox/maps';\nimport { Button, StyleSheet, Text, ImageSourcePropType } from 'react-native';\nimport { Divider } from '@rneui/base';\n\nimport Bubble from '../common/Bubble';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\ntype CompassImage = 'compass1' | 'compass2';\nconst images: Record<CompassImage, ImageSourcePropType> = {\n  compass1: require('../../assets/compass1.png'),\n  compass2: require('../../assets/compass2.png'),\n};\n\nenum OrnamentType {\n  Logo = 'logo',\n  Attribution = 'attribution',\n  Compass = 'compass',\n  ScaleBar = 'scaleBar',\n}\n\nenum OrnamentPosition {\n  TopLeft = 'topLeft',\n  TopRight = 'topRight',\n  BottomRight = 'bottomRight',\n  BottomLeft = 'bottomLeft',\n}\n\nconst POSITIONS = {\n  [OrnamentPosition.TopLeft]: { top: 8, left: 8 },\n  [OrnamentPosition.TopRight]: { top: 8, right: 8 },\n  [OrnamentPosition.BottomRight]: { bottom: 8, right: 8 },\n  [OrnamentPosition.BottomLeft]: { bottom: 8, left: 8 },\n};\n\ntype OrnamentButtonsProps = {\n  ornamentType: OrnamentType;\n  visibility: Record<OrnamentType, true | false | undefined>;\n  position: Record<OrnamentType, OrnamentPosition>;\n  onPressVisibility: (ornamentType: OrnamentType) => void;\n  onPressPosition: (ornamentType: OrnamentType) => void;\n};\n\nconst OrnamentButtons = ({\n  ornamentType,\n  visibility,\n  position,\n  onPressVisibility,\n  onPressPosition,\n}: OrnamentButtonsProps) => (\n  <>\n    <Button\n      title={'Visiblity: ' + visibility[ornamentType]}\n      onPress={(): void => onPressVisibility(ornamentType)}\n    />\n    <Button\n      title={'Position: ' + position[ornamentType]}\n      onPress={(): void => onPressPosition(ornamentType)}\n    />\n  </>\n);\n\nconst Ornaments = () => {\n  const [visibility, setVisibility] = useState({\n    [OrnamentType.Logo]: undefined,\n    [OrnamentType.Attribution]: undefined,\n    [OrnamentType.Compass]: undefined,\n    [OrnamentType.ScaleBar]: undefined,\n  });\n\n  const [position, setPosition] = useState({\n    [OrnamentType.Logo]: OrnamentPosition.BottomLeft,\n    [OrnamentType.Attribution]: OrnamentPosition.BottomRight,\n    [OrnamentType.Compass]: OrnamentPosition.TopRight,\n    [OrnamentType.ScaleBar]: OrnamentPosition.TopLeft,\n  });\n\n  const [compassImage, setCompassImage] = useState<CompassImage | undefined>();\n  const [compassFadeWhenNorth, setCompassFadeWhenNorth] = useState<\n    boolean | undefined\n  >(undefined);\n\n  const handlePressVisibility = (ornamentType: OrnamentType): void => {\n    setVisibility((prevState) => {\n      let newValue;\n\n      if (prevState[ornamentType] === undefined) {\n        newValue = true;\n      } else if (prevState[ornamentType] === true) {\n        newValue = false;\n      } else if (prevState[ornamentType] === false) {\n        newValue = undefined;\n      }\n\n      return { ...prevState, [ornamentType]: newValue };\n    });\n  };\n\n  const handlePressPosition = (ornamentType: OrnamentType): void => {\n    setPosition((prevState) => {\n      let newValue;\n\n      if (prevState[ornamentType] === OrnamentPosition.TopLeft) {\n        newValue = OrnamentPosition.TopRight;\n      } else if (prevState[ornamentType] === OrnamentPosition.TopRight) {\n        newValue = OrnamentPosition.BottomRight;\n      } else if (prevState[ornamentType] === OrnamentPosition.BottomRight) {\n        newValue = OrnamentPosition.BottomLeft;\n      } else if (prevState[ornamentType] === OrnamentPosition.BottomLeft) {\n        newValue = OrnamentPosition.TopLeft;\n      }\n\n      return { ...prevState, [ornamentType]: newValue };\n    });\n  };\n\n  return (\n    <>\n      <MapView\n        style={styles.matchParent}\n        logoEnabled={visibility[OrnamentType.Logo]}\n        logoPosition={POSITIONS[position[OrnamentType.Logo]]}\n        attributionEnabled={visibility[OrnamentType.Attribution]}\n        attributionPosition={POSITIONS[position[OrnamentType.Attribution]]}\n        compassEnabled={visibility[OrnamentType.Compass]}\n        compassPosition={POSITIONS[position[OrnamentType.Compass]]}\n        compassImage={compassImage}\n        compassFadeWhenNorth={compassFadeWhenNorth}\n        scaleBarEnabled={visibility[OrnamentType.ScaleBar]}\n        scaleBarPosition={POSITIONS[position[OrnamentType.ScaleBar]]}\n      >\n        <Images images={images} />\n        <Camera />\n      </MapView>\n\n      <Bubble style={styles.bubble}>\n        <Text>Logo</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.Logo}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Text>Attribution</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.Attribution}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Text>Compass</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.Compass}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n        <Button\n          title={'Image: ' + compassImage}\n          onPress={() => {\n            if (!compassImage) {\n              setCompassImage('compass1');\n            } else if (compassImage === 'compass1') {\n              setCompassImage('compass2');\n            } else {\n              setCompassImage(undefined);\n            }\n          }}\n        />\n        <Button\n          title={'Fade when north: ' + compassFadeWhenNorth}\n          onPress={() => {\n            if (compassFadeWhenNorth === undefined) {\n              setCompassFadeWhenNorth(true);\n            } else if (compassFadeWhenNorth) {\n              setCompassFadeWhenNorth(false);\n            } else {\n              setCompassFadeWhenNorth(undefined);\n            }\n          }}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Text>ScaleBar</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.ScaleBar}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n      </Bubble>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  divider: {\n    width: '100%',\n    marginTop: 5,\n    marginBottom: 10,\n  },\n  bubble: {\n    flex: 0,\n    alignItems: 'flex-start',\n    padding: 10,\n    marginBottom: 96,\n  },\n  matchParent: {\n    flex: 1,\n  },\n});\n\nexport default Ornaments;\n\nconst metadata: ExampleWithMetadata['metadata'] = {\n  title: 'Ornaments',\n  tags: [\n    'MapView#logoEnabled',\n    'MapView#logoPosition',\n    'MapView#attributionEnabled',\n    'MapView#attributionPosition',\n    'MapView#compassEnabled',\n    'MapView#compassPosition',\n    'MapView#compassImage',\n    'MapView#compassFadeWhenNorth',\n    'MapView#scaleBarEnabled',\n    'MapView#scaleBarPosition',\n  ],\n  docs: `\nCustomize ornaments of the map(logo, compass, scalebar, attribution)\n`,\n};\nOrnaments.metadata = metadata;\n\n"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.img,{alt:"Ornaments.png",src:t(2927).Z+"",width:"295",height:"640"}),"}"]})]})}function c(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},2927:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/Ornaments-cc4105025c90a5799fa1686a837c35f0.png"},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>s});var a=t(7294);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);