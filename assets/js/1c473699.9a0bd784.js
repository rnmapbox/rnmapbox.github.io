"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[169],{9049:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>p});var i=t(5893),o=t(1151);const a={title:"Show Region Did Change",tags:["MapView#onRegionWillChange","MapView#onRegionIsChanging","MapView#onRegionDidChange"],custom_props:{example_rel_path:"Map/ShowRegionDidChange.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/ShowRegionDidChange.js"},s=void 0,r={id:"examples/Map/ShowRegionDidChange",title:"Show Region Did Change",description:"Demonstates MapView region change events.",source:"@site/docs/examples/Map/ShowRegionDidChange.md",sourceDirName:"examples/Map",slug:"/examples/Map/ShowRegionDidChange",permalink:"/docs/examples/Map/ShowRegionDidChange",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/ShowRegionDidChange.js",tags:[{inline:!0,label:"MapView#onRegionWillChange",permalink:"/docs/tags/map-view-on-region-will-change"},{inline:!0,label:"MapView#onRegionIsChanging",permalink:"/docs/tags/map-view-on-region-is-changing"},{inline:!0,label:"MapView#onRegionDidChange",permalink:"/docs/tags/map-view-on-region-did-change"}],version:"current",frontMatter:{title:"Show Region Did Change",tags:["MapView#onRegionWillChange","MapView#onRegionIsChanging","MapView#onRegionDidChange"],custom_props:{example_rel_path:"Map/ShowRegionDidChange.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/ShowRegionDidChange.js"},sidebar:"examplesSidebar",previous:{title:"Show Map Local Style",permalink:"/docs/examples/Map/ShowMapLocalStyle"},next:{title:"Source Layer Visibility",permalink:"/docs/examples/Map/SourceLayerVisibility"}},g={},p=[];function h(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Demonstates MapView region change events."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { Text } from 'react-native';\nimport { MapView, Camera } from '@rnmapbox/maps';\nimport { ButtonGroup } from '@rneui/base';\n\nimport sheet from '../../styles/sheet';\nimport { DEFAULT_CENTER_COORDINATE, SF_OFFICE_COORDINATE } from '../../utils';\nimport Bubble from '../common/Bubble';\n\nconst styles = {\n  bubble: { marginBottom: 100 },\n};\n\nconst isValidCoordinate = (geometry) => {\n  if (!geometry) {\n    return false;\n  }\n  return geometry.coordinates[0] !== 0 && geometry.coordinates[1] !== 0;\n};\n\nclass ShowRegionDidChange extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      reason: '',\n      cameraConfig: {\n        centerCoordinate: DEFAULT_CENTER_COORDINATE,\n        zoomLevel: 12,\n      },\n      regionFeature: undefined,\n      selectedIndex: 0,\n    };\n\n    this._tabOptions = [\n      { label: 'Fly To', data: SF_OFFICE_COORDINATE },\n      {\n        label: 'Fit Bounds',\n        data: { ne: [-74.12641, 40.797968], sw: [-74.143727, 40.772177] },\n      },\n      { label: 'Zoom To', data: 16 },\n    ];\n\n    this.onRegionDidChange = this.onRegionDidChange.bind(this);\n    this.onRegionWillChange = this.onRegionWillChange.bind(this);\n    this.onRegionIsChanging = this.onRegionIsChanging.bind(this);\n    this.onOptionPress = this.onOptionPress.bind(this);\n  }\n\n  async onOptionPress(optionIndex, optionData) {\n    if (optionIndex === 0) {\n      this.setState({\n        cameraConfig: {\n          triggerKey: Date.now(),\n          centerCoordinate: optionData,\n          animationMode: Camera.Mode.Flight,\n          animationDuration: 2000,\n        },\n      });\n    } else if (optionIndex === 1) {\n      this.setState({\n        cameraConfig: {\n          triggerKey: Date.now(),\n          bounds: optionData,\n        },\n      });\n    } else if (optionIndex === 2) {\n      this.setState({\n        cameraConfig: {\n          triggerKey: Date.now(),\n          zoomLevel: optionData,\n        },\n      });\n    }\n  }\n\n  onRegionWillChange(regionFeature) {\n    this.setState({ reason: 'will change', regionFeature });\n  }\n\n  onRegionDidChange(regionFeature) {\n    this.setState({ reason: 'did change', regionFeature });\n  }\n\n  onRegionIsChanging(regionFeature) {\n    this.setState({ reason: 'is changing', regionFeature });\n  }\n\n  renderRegionChange() {\n    if (\n      !this.state.regionFeature ||\n      !isValidCoordinate(this.state.regionFeature.geometry)\n    ) {\n      return (\n        <Bubble style={styles.bubble}>\n          <Text>Move the map!</Text>\n        </Bubble>\n      );\n    }\n\n    const { geometry, properties } = this.state.regionFeature;\n\n    const neCoord = properties.visibleBounds[0]\n      .map((n) => n.toPrecision(6))\n      .join(', ');\n    const swCoord = properties.visibleBounds[1]\n      .map((n) => n.toPrecision(6))\n      .join(', ');\n\n    return (\n      <Bubble style={styles.bubble}>\n        <Text>{this.state.reason}</Text>\n        <Text>Latitude: {geometry.coordinates[1]}</Text>\n        <Text>Longitude: {geometry.coordinates[0]}</Text>\n        <Text>Visible Bounds NE: {neCoord}</Text>\n        <Text>Visible Bounds SW: {swCoord}</Text>\n        <Text>Zoom Level: {properties.zoomLevel}</Text>\n        <Text>Heading: {properties.heading}</Text>\n        <Text>Pitch: {properties.pitch}</Text>\n        <Text>\n          Is User Interaction: {properties.isUserInteraction ? 'true' : 'false'}\n        </Text>\n        <Text>Animated: {properties.animated ? 'true' : 'false'}</Text>\n      </Bubble>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <ButtonGroup\n          buttons={this._tabOptions.map((i) => i.label)}\n          selectedIndex={this.state.selectedIndex}\n          onPress={(index) => {\n            this.setState({ selectedIndex: index });\n            this.onOptionPress(index, this._tabOptions[index].data);\n          }}\n        />\n        <MapView\n          ref={(c) => (this.map = c)}\n          style={sheet.matchParent}\n          onRegionWillChange={this.onRegionWillChange}\n          onRegionIsChanging={this.onRegionIsChanging}\n          onRegionDidChange={this.onRegionDidChange}\n        >\n          <Camera {...this.state.cameraConfig} />\n        </MapView>\n        {this.renderRegionChange()}\n      </>\n    );\n  }\n}\n\nexport default ShowRegionDidChange;\n\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"ShowRegionDidChange.png",src:t(9418).Z+"",width:"295",height:"640"}),"}"]})]})}function l(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9418:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ShowRegionDidChange-afeddc9bbf6496040ac288d70b063fca.png"},1151:(e,n,t)=>{t.d(n,{a:()=>s});var i=t(7294);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);