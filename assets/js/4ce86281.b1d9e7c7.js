"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[3316],{3009:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=t(5893),r=t(1151);const o={title:"Query Features Bounding Box",tags:[],custom_props:{example_rel_path:"FillRasterLayer/QueryWithRect.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QueryWithRect.js"},a=void 0,i={id:"examples/FillRasterLayer/QueryWithRect",title:"Query Features Bounding Box",description:"QueryWithRect.png}",source:"@site/docs/examples/FillRasterLayer/QueryWithRect.md",sourceDirName:"examples/FillRasterLayer",slug:"/examples/FillRasterLayer/QueryWithRect",permalink:"/docs/examples/FillRasterLayer/QueryWithRect",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QueryWithRect.js",tags:[],version:"current",frontMatter:{title:"Query Features Bounding Box",tags:[],custom_props:{example_rel_path:"FillRasterLayer/QueryWithRect.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QueryWithRect.js"},sidebar:"examplesSidebar",previous:{title:"Query Source Features",permalink:"/docs/examples/FillRasterLayer/QuerySourceFeatures"},next:{title:"Raster Source",permalink:"/docs/examples/FillRasterLayer/RasterSource"}},l={},c=[];function p(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { Text } from 'react-native';\nimport {\n  MapView,\n  Camera,\n  ShapeSource,\n  FillLayer,\n  StyleURL,\n} from '@rnmapbox/maps';\n\nimport sheet from '../../styles/sheet';\nimport nycJSON from '../../assets/nyc_geojson.json';\nimport BaseExamplePropTypes from '../common/BaseExamplePropTypes';\nimport Bubble from '../common/Bubble';\n\nconst styles = {\n  neighborhoods: {\n    fillAntialias: true,\n    fillColor: 'blue',\n    fillOutlineColor: 'black',\n    fillOpacity: 0.84,\n  },\n  selectedNeighborhoods: {\n    fillAntialias: true,\n    fillColor: 'green',\n    fillOpacity: 0.84,\n  },\n  bubbleText: { textAlign: 'center' },\n};\n\nclass QueryWithRect extends React.Component {\n  static propTypes = {\n    ...BaseExamplePropTypes,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      screenCoords: [],\n      selectedGeoJSON: null,\n    };\n\n    this.onPress = this.onPress.bind(this);\n  }\n\n  async onPress(e) {\n    const { screenPointX, screenPointY } = e.properties;\n\n    const screenCoords = Object.assign([], this.state.screenCoords);\n    screenCoords.push([screenPointX, screenPointY]);\n\n    if (screenCoords.length === 2) {\n      const featureCollection = await this._map.queryRenderedFeaturesInRect(\n        this.getBoundingBox(screenCoords),\n        null,\n        ['nycFill'],\n      );\n\n      this.setState({\n        screenCoords: [],\n        selectedGeoJSON: featureCollection.features.length\n          ? featureCollection\n          : null,\n      });\n    } else {\n      this.setState({ screenCoords });\n    }\n  }\n\n  getBoundingBox(screenCoords) {\n    const maxX = Math.max(screenCoords[0][0], screenCoords[1][0]);\n    const minX = Math.min(screenCoords[0][0], screenCoords[1][0]);\n    const maxY = Math.max(screenCoords[0][1], screenCoords[1][1]);\n    const minY = Math.min(screenCoords[0][1], screenCoords[1][1]);\n    // Rect -> [top, right, bottom, left]\n    return [minY, maxX, maxY, minX];\n  }\n\n  get message() {\n    if (this.state.screenCoords.length === 1) {\n      return 'Press in one more location to close the rect';\n    }\n    return 'Press in two different locations to form a rect to query with';\n  }\n\n  render() {\n    return (\n      <>\n        <MapView\n          ref={(c) => {\n            this._map = c;\n          }}\n          onPress={this.onPress}\n          style={sheet.matchParent}\n          styleURL={StyleURL.Light}\n        >\n          <Camera zoomLevel={9} centerCoordinate={[-73.970895, 40.723279]} />\n\n          <ShapeSource id=\"nyc\" shape={nycJSON}>\n            <FillLayer id=\"nycFill\" style={styles.neighborhoods} />\n          </ShapeSource>\n\n          {this.state.selectedGeoJSON ? (\n            <ShapeSource id=\"selectedNYC\" shape={this.state.selectedGeoJSON}>\n              <FillLayer\n                id=\"selectedNYCFill\"\n                style={styles.selectedNeighborhoods}\n              />\n            </ShapeSource>\n          ) : null}\n        </MapView>\n\n        <Bubble>\n          <Text style={styles.bubbleText}>{this.message}</Text>\n        </Bubble>\n      </>\n    );\n  }\n}\n\nexport default QueryWithRect;\n\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{alt:"QueryWithRect.png",src:t(4706).Z+"",width:"295",height:"640"}),"}"]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},4706:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/QueryWithRect-e8caa5e9ade94006986596f41f44059e.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var s=t(7294);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);