"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[8380],{3905:(e,r,t)=>{t.d(r,{Zo:()=>i,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},i=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),p=l(t),y=a,f=p["".concat(c,".").concat(y)]||p[y]||m[y]||o;return t?n.createElement(f,s(s({ref:r},i),{},{components:t})):n.createElement(f,s({ref:r},i))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=y;var u={};for(var c in r)hasOwnProperty.call(r,c)&&(u[c]=r[c]);u.originalType=e,u[p]="string"==typeof e?e:a,s[1]=u;for(var l=2;l<o;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7478:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const o={title:"Query Source Features",tags:[],custom_props:{example_rel_path:"FillRasterLayer/QuerySourceFeatures.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx"},s=void 0,u={unversionedId:"examples/FillRasterLayer/QuerySourceFeatures",id:"examples/FillRasterLayer/QuerySourceFeatures",title:"Query Source Features",description:"QuerySourceFeatures.png}",source:"@site/docs/examples/FillRasterLayer/QuerySourceFeatures.md",sourceDirName:"examples/FillRasterLayer",slug:"/examples/FillRasterLayer/QuerySourceFeatures",permalink:"/docs/examples/FillRasterLayer/QuerySourceFeatures",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx",tags:[],version:"current",frontMatter:{title:"Query Source Features",tags:[],custom_props:{example_rel_path:"FillRasterLayer/QuerySourceFeatures.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx"},sidebar:"examplesSidebar",previous:{title:"Query Feature Point",permalink:"/docs/examples/FillRasterLayer/QueryAtPoint"},next:{title:"Query Features Bounding Box",permalink:"/docs/examples/FillRasterLayer/QueryWithRect"}},c={},l=[],i={toc:l},p="wrapper";function m(e){let{components:r,...o}=e;return(0,a.kt)(p,(0,n.Z)({},i,o,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Text } from 'react-native';\nimport MapboxGL, { FillLayer, VectorSource } from '@rnmapbox/maps';\n\nimport { BaseExampleProps } from '../common/BaseExamplePropTypes';\nimport sheet from '../../styles/sheet';\nimport Page from '../common/Page';\nimport Bubble from '../common/Bubble';\n\nconst vectorSourceUnderTest = {\n  url: 'mapbox://mapbox.82pkq93d',\n  id: 'counties',\n};\nconst zoomUnderTest = 15;\nconst coordinatesUnderTest = [-73.9880595, 40.7738941];\nconst countiesOfInterest = [\n  'New York County', // In viewport\n  'Hudson County', // Outside of viewport\n];\n\nconst QuerySourceFeatures = (props: BaseExampleProps) => {\n  const [ready, setReady] = useState(false);\n  const [message, setMessage] = useState('');\n  const map = useRef<MapboxGL.MapView>(null);\n\n  const runTest = useCallback(async () => {\n    if (!map || !ready) return;\n    try {\n      const res = await map.current?.querySourceFeatures(\n        vectorSourceUnderTest.id,\n        ['any', ...countiesOfInterest.map((c) => ['==', ['get', 'COUNTY'], c])],\n        ['original'],\n      );\n\n      if (!res) {\n        setMessage(`querySourceFeatures result is invalid`);\n        return;\n      }\n\n      const featuresCount = res.features.length;\n      if (featuresCount !== countiesOfInterest.length) {\n        setMessage(\n          `[ERROR] querySourceFeatures resulted in ${featuresCount} features. Expected ${countiesOfInterest.length}`,\n        );\n        return;\n      }\n\n      setMessage(\n        `[SUCCESS] querySourceFeatures retrieved ${featuresCount} features ` +\n          `and includes: \\n- ${res.features\n            .map((f) => f.properties?.COUNTY)\n            .join('\\n- ')}`,\n      );\n    } catch (err) {\n      console.error(err);\n      setMessage(`[ERROR] ${err}. See console for details.`);\n    }\n  }, [ready]);\n\n  useEffect(() => {\n    runTest();\n  }, [runTest]);\n\n  return (\n    <Page {...props}>\n      <MapboxGL.MapView\n        style={sheet.matchParent}\n        styleURL={MapboxGL.StyleURL.Light}\n        ref={map}\n        onCameraChanged={runTest}\n        onMapIdle={() => setReady(true)}\n      >\n        <VectorSource {...vectorSourceUnderTest}>\n          <FillLayer\n            sourceID={'counties'}\n            sourceLayerID=\"original\"\n            id=\"counties\"\n            belowLayerID=\"building\"\n          />\n        </VectorSource>\n        <MapboxGL.Camera\n          zoomLevel={zoomUnderTest}\n          centerCoordinate={coordinatesUnderTest}\n          animationMode=\"none\"\n          animationDuration={0}\n        />\n      </MapboxGL.MapView>\n\n      <Bubble>\n        <Text>{message}</Text>\n      </Bubble>\n    </Page>\n  );\n};\n\nexport default QuerySourceFeatures;\n\n\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"QuerySourceFeatures.png",src:t(6503).Z,width:"295",height:"640"}),"}"))}m.isMDXComponent=!0},6503:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/QuerySourceFeatures-cdbe580932c404c6852e60fdc46ff215.png"}}]);