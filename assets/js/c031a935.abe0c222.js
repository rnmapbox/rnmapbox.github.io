"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[4852],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),f=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=f(e.components);return o.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=f(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return t?o.createElement(g,r(r({ref:n},c),{},{components:t})):o.createElement(g,r({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var f=2;f<a;f++)r[f]=t[f];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4533:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>f});var o=t(7462),i=(t(7294),t(3905));const a={title:"Change Offline Region",tags:["offlineManage#createPack"],custom_props:{example_rel_path:"Map/CreateOfflineRegion.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/CreateOfflineRegion.js"},r=void 0,s={unversionedId:"examples/Map/CreateOfflineRegion",id:"examples/Map/CreateOfflineRegion",title:"Change Offline Region",description:"Creates offline pack and montiors them",source:"@site/docs/examples/Map/CreateOfflineRegion.md",sourceDirName:"examples/Map",slug:"/examples/Map/CreateOfflineRegion",permalink:"/docs/examples/Map/CreateOfflineRegion",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/CreateOfflineRegion.js",tags:[{label:"offlineManage#createPack",permalink:"/docs/tags/offline-manage-create-pack"}],version:"current",frontMatter:{title:"Change Offline Region",tags:["offlineManage#createPack"],custom_props:{example_rel_path:"Map/CreateOfflineRegion.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/CreateOfflineRegion.js"},sidebar:"examplesSidebar",previous:{title:"Change Layer Color",permalink:"/docs/examples/Map/ChangeLayerColor"},next:{title:"Dynamic URL",permalink:"/docs/examples/Map/DynamicUrl"}},l={},f=[],c={toc:f},u="wrapper";function p(e){let{components:n,...a}=e;return(0,i.kt)(u,(0,o.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Creates offline pack and montiors them"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {\n  Alert,\n  Text,\n  View,\n  Button,\n  TouchableOpacity,\n  Dimensions,\n  StyleSheet,\n} from 'react-native';\nimport Mapbox, { offlineManager, MapView, Camera } from '@rnmapbox/maps';\nimport geoViewport from '@mapbox/geo-viewport';\n\nimport sheet from '../../styles/sheet';\nimport Bubble from '../common/Bubble';\n\nconst CENTER_COORD = [-73.970895, 40.723279];\nconst MAPBOX_VECTOR_TILE_SIZE = 512;\n\nconst styles = StyleSheet.create({\n  bubble: { flex: 1 },\n  button: {\n    alignItems: 'center',\n    backgroundColor: 'blue',\n    borderRadius: 3,\n    flex: 0.4,\n    justifyContent: 'center',\n    padding: 8,\n  },\n  buttonCnt: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  buttonTxt: {\n    color: 'white',\n  },\n});\n\nclass CreateOfflineRegion extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: `test-${Date.now()}`,\n      offlineRegion: null,\n      offlineRegionStatus: null,\n    };\n\n    this.onDownloadProgress = this.onDownloadProgress.bind(this);\n    this.errorListener = this.errorListener.bind(this);\n    this.onDidFinishLoadingStyle = this.onDidFinishLoadingStyle.bind(this);\n\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n    this.onStatusRequest = this.onStatusRequest.bind(this);\n    this.onCreate = this.onCreate.bind(this);\n\n    this.options = {};\n  }\n\n  componentWillUnmount() {\n    // avoid setState warnings if we back out before we finishing downloading\n    offlineManager.deletePack(this.state.name);\n    offlineManager.unsubscribe('test');\n  }\n\n  async onDidFinishLoadingStyle() {\n    const { width, height } = Dimensions.get('window');\n    const bounds = geoViewport.bounds(\n      CENTER_COORD,\n      12,\n      [width, height],\n      MAPBOX_VECTOR_TILE_SIZE,\n    );\n\n    this.options = {\n      name: this.state.name,\n      styleURL: Mapbox.StyleURL.Street,\n      bounds: [\n        [bounds[0], bounds[1]],\n        [bounds[2], bounds[3]],\n      ],\n      minZoom: 10,\n      maxZoom: 20,\n    };\n  }\n\n  errorListener(offlineRegion, error) {\n    console.log('Error:', error);\n  }\n\n  onDownloadProgress(offlineRegion, offlineRegionStatus) {\n    this.setState({\n      name: offlineRegion.name,\n      offlineRegion,\n      offlineRegionStatus,\n    });\n  }\n\n  onCreate() {\n    // start download\n    offlineManager.createPack(\n      this.options,\n      this.onDownloadProgress,\n      this.errorListener,\n    );\n  }\n\n  onResume() {\n    if (this.state.offlineRegion) {\n      this.state.offlineRegion.resume();\n    }\n  }\n\n  onPause() {\n    if (this.state.offlineRegion) {\n      this.state.offlineRegion.pause();\n    }\n  }\n\n  async onStatusRequest() {\n    if (this.state.offlineRegion) {\n      const offlineRegionStatus = await this.state.offlineRegion.status();\n      Alert.alert('Get Status', JSON.stringify(offlineRegionStatus, null, 2));\n    }\n  }\n\n  _formatPercent() {\n    if (!this.state.offlineRegionStatus) {\n      return '0%';\n    }\n    return Math.round(this.state.offlineRegionStatus.percentage / 10) / 10;\n  }\n\n  _getRegionDownloadState(downloadState) {\n    switch (downloadState) {\n      case Mapbox.OfflinePackDownloadState.Active:\n        return 'Active';\n      case Mapbox.OfflinePackDownloadState.Complete:\n        return 'Complete';\n      default:\n        return 'Inactive';\n    }\n  }\n\n  render() {\n    const { offlineRegionStatus } = this.state;\n\n    return (\n      <>\n        <MapView\n          ref={(c) => (this._map = c)}\n          onPress={this.onPress}\n          onDidFinishLoadingMap={this.onDidFinishLoadingStyle}\n          style={sheet.matchParent}\n        >\n          <Camera zoomLevel={10} centerCoordinate={CENTER_COORD} />\n        </MapView>\n\n        {offlineRegionStatus !== null ? (\n          <Bubble>\n            <View style={styles.bubble}>\n              <Text>\n                Download State:{' '}\n                {this._getRegionDownloadState(offlineRegionStatus.state)}\n              </Text>\n              <Text>Download Percent: {offlineRegionStatus.percentage}</Text>\n              <Text>\n                Completed Resource Count:{' '}\n                {offlineRegionStatus.completedResourceCount}\n              </Text>\n              <Text>\n                Completed Resource Size:{' '}\n                {offlineRegionStatus.completedResourceSize}\n              </Text>\n              <Text>\n                Completed Tile Count: {offlineRegionStatus.completedTileCount}\n              </Text>\n              <Text>\n                Required Resource Count:{' '}\n                {offlineRegionStatus.requiredResourceCount}\n              </Text>\n\n              <View style={styles.buttonCnt}>\n                <Button title=\"Create\" onPress={this.onCreate} />\n                <TouchableOpacity onPress={this.onResume}>\n                  <View style={styles.button}>\n                    <Text style={styles.buttonTxt}>Resume</Text>\n                  </View>\n                </TouchableOpacity>\n\n                <TouchableOpacity onPress={this.onStatusRequest}>\n                  <View style={styles.button}>\n                    <Text style={styles.buttonTxt}>Status</Text>\n                  </View>\n                </TouchableOpacity>\n\n                <TouchableOpacity onPress={this.onPause}>\n                  <View style={styles.button}>\n                    <Text style={styles.buttonTxt}>Pause</Text>\n                  </View>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </Bubble>\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default CreateOfflineRegion;\n\n\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"CreateOfflineRegion.png",src:t(3809).Z,width:"295",height:"640"}),"}"))}p.isMDXComponent=!0},3809:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/CreateOfflineRegion-2930ef71cb98d61e91b3cd880b0439ea.png"}}]);