"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[8380],{6124:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var n=t(5893),s=t(1151);const a={title:"Query Source Features",tags:["VectorSource","querySourceFeatures"],custom_props:{example_rel_path:"FillRasterLayer/QuerySourceFeatures.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx"},u=void 0,o={id:"examples/FillRasterLayer/QuerySourceFeatures",title:"Query Source Features",description:"QuerySourceFeatures.png}",source:"@site/docs/examples/FillRasterLayer/QuerySourceFeatures.md",sourceDirName:"examples/FillRasterLayer",slug:"/examples/FillRasterLayer/QuerySourceFeatures",permalink:"/docs/examples/FillRasterLayer/QuerySourceFeatures",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx",tags:[{inline:!0,label:"VectorSource",permalink:"/docs/tags/vector-source"},{inline:!0,label:"querySourceFeatures",permalink:"/docs/tags/query-source-features"}],version:"current",frontMatter:{title:"Query Source Features",tags:["VectorSource","querySourceFeatures"],custom_props:{example_rel_path:"FillRasterLayer/QuerySourceFeatures.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx"},sidebar:"examplesSidebar",previous:{title:"Query Feature Point",permalink:"/docs/examples/FillRasterLayer/QueryAtPoint"},next:{title:"Query Features Bounding Box",permalink:"/docs/examples/FillRasterLayer/QueryWithRect"}},c={},i=[];function l(e){const r={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-jsx",children:"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Text } from 'react-native';\nimport {\n  StyleURL,\n  MapView,\n  FillLayer,\n  VectorSource,\n  Camera,\n} from '@rnmapbox/maps';\n\nimport Bubble from '../common/Bubble';\n\nconst vectorSourceUnderTest = {\n  url: 'mapbox://mapbox.82pkq93d',\n  id: 'counties',\n};\nconst zoomUnderTest = 15;\nconst coordinatesUnderTest = [-73.9880595, 40.7738941];\nconst countiesOfInterest = [\n  'New York County', // In viewport\n  'Hudson County', // Outside of viewport\n];\n\nconst styles = {\n  matchParent: { flex: 1 },\n};\n\nconst QuerySourceFeatures = () => {\n  const [ready, setReady] = useState(false);\n  const [message, setMessage] = useState('');\n  const map = useRef<MapView>(null);\n\n  const runTest = useCallback(async () => {\n    if (!map || !ready) return;\n    try {\n      const res = await map.current?.querySourceFeatures(\n        vectorSourceUnderTest.id,\n        ['any', ...countiesOfInterest.map((c) => ['==', ['get', 'COUNTY'], c])],\n        ['original'],\n      );\n\n      if (!res) {\n        setMessage(`querySourceFeatures result is invalid`);\n        return;\n      }\n\n      const featuresCount = res.features.length;\n      if (featuresCount !== countiesOfInterest.length) {\n        setMessage(\n          `[ERROR] querySourceFeatures resulted in ${featuresCount} features. Expected ${countiesOfInterest.length}`,\n        );\n        return;\n      }\n\n      setMessage(\n        `[SUCCESS] querySourceFeatures retrieved ${featuresCount} features ` +\n          `and includes: \\n- ${res.features\n            .map((f) => f.properties?.COUNTY)\n            .join('\\n- ')}`,\n      );\n    } catch (err) {\n      console.error(err);\n      setMessage(`[ERROR] ${err}. See console for details.`);\n    }\n  }, [ready]);\n\n  useEffect(() => {\n    runTest();\n  }, [runTest]);\n\n  return (\n    <>\n      <MapView\n        style={styles.matchParent}\n        styleURL={StyleURL.Light}\n        ref={map}\n        onCameraChanged={runTest}\n        onMapIdle={() => setReady(true)}\n      >\n        <VectorSource {...vectorSourceUnderTest}>\n          <FillLayer\n            sourceID={'counties'}\n            sourceLayerID=\"original\"\n            id=\"counties\"\n            belowLayerID=\"building\"\n          />\n        </VectorSource>\n        <Camera\n          zoomLevel={zoomUnderTest}\n          centerCoordinate={coordinatesUnderTest}\n          animationMode=\"none\"\n          animationDuration={0}\n        />\n      </MapView>\n\n      <Bubble>\n        <Text>{message}</Text>\n      </Bubble>\n    </>\n  );\n};\n\nexport default QuerySourceFeatures;\n\n\n"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.img,{alt:"QuerySourceFeatures.png",src:t(6503).Z+"",width:"295",height:"640"}),"}"]})]})}function p(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},6503:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/QuerySourceFeatures-74808ff087c35e4fe0de4fb46a6dfbc2.png"},1151:(e,r,t)=>{t.d(r,{a:()=>u});var n=t(7294);const s={},a=n.createContext(s);function u(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}}}]);