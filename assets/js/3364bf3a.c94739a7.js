"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[2852],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),i=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=i(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=i(n),y=r,b=p["".concat(c,".").concat(y)]||p[y]||u[y]||a;return n?o.createElement(b,s(s({ref:t},m),{},{components:n})):o.createElement(b,s({ref:t},m))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=y;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var i=2;i<a;i++)s[i]=n[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},5338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var o=n(7462),r=(n(7294),n(3905));const a={title:"Custom Icon Native Asset",tags:["ShapeSource","ShapeSource#onPress","SymbolLayer","Images","SymbolLayer#iconImage"],custom_props:{example_rel_path:"SymbolCircleLayer/CustomIconNativeAsset.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/CustomIconNativeAsset.tsx"},s=void 0,l={unversionedId:"examples/SymbolCircleLayer/CustomIconNativeAsset",id:"examples/SymbolCircleLayer/CustomIconNativeAsset",title:"Custom Icon Native Asset",description:"Renders a symbol layer with custom icon (native asset) defined using the Images component. Clicking a location on a map add a new icon.",source:"@site/docs/examples/SymbolCircleLayer/CustomIconNativeAsset.md",sourceDirName:"examples/SymbolCircleLayer",slug:"/examples/SymbolCircleLayer/CustomIconNativeAsset",permalink:"/docs/examples/SymbolCircleLayer/CustomIconNativeAsset",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/CustomIconNativeAsset.tsx",tags:[{label:"ShapeSource",permalink:"/docs/tags/shape-source"},{label:"ShapeSource#onPress",permalink:"/docs/tags/shape-source-on-press"},{label:"SymbolLayer",permalink:"/docs/tags/symbol-layer"},{label:"Images",permalink:"/docs/tags/images"},{label:"SymbolLayer#iconImage",permalink:"/docs/tags/symbol-layer-icon-image"}],version:"current",frontMatter:{title:"Custom Icon Native Asset",tags:["ShapeSource","ShapeSource#onPress","SymbolLayer","Images","SymbolLayer#iconImage"],custom_props:{example_rel_path:"SymbolCircleLayer/CustomIconNativeAsset.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/SymbolCircleLayer/CustomIconNativeAsset.tsx"},sidebar:"examplesSidebar",previous:{title:"Custom Icon",permalink:"/docs/examples/SymbolCircleLayer/CustomIcon"},next:{title:"Data driven circle colors",permalink:"/docs/examples/SymbolCircleLayer/DataDrivenCircleColors"}},c={},i=[],m={toc:i},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,o.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Renders a symbol layer with custom icon (native asset) defined using the Images component. Clicking a location on a map add a new icon."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useRef, memo, useState } from 'react';\nimport { Text } from 'react-native';\nimport MapboxGL, {\n  MapView,\n  Camera,\n  ShapeSource,\n  SymbolLayer,\n  Images,\n} from '@rnmapbox/maps';\nimport { featureCollection, feature, point } from '@turf/helpers';\n\nimport Bubble from '../common/Bubble';\nimport type { ExampleWithMetadata } from '../common/ExampleMetadata';\n\nconst styles = {\n  icon: {\n    iconImage: 'pin',\n    iconAllowOverlap: true,\n  },\n};\n\nconst CustomIconNativeAsset = memo(() => {\n  const cameraRef = useRef<Camera>(null);\n  const [stateFeatureCollection, setStateFeatureCollection] =\n    useState<GeoJSON.FeatureCollection>(\n      featureCollection([point([-73.970895, 40.723279])]),\n    );\n\n  const onPress = (e: GeoJSON.Feature) => {\n    const aFeature = feature(e.geometry);\n    aFeature.id = `${Date.now()}`;\n\n    setStateFeatureCollection(\n      featureCollection([...stateFeatureCollection.features, aFeature]),\n    );\n  };\n\n  const onSourceLayerPress = (e: any) => {\n    console.log(\n      'You pressed a layer here are your features:',\n      e.features,\n      e.coordinates,\n      e.point,\n    );\n  };\n\n  return (\n    <>\n      <MapView\n        style={{ flex: 1 }}\n        styleURL={MapboxGL.StyleURL.Light}\n        onPress={onPress}\n      >\n        <Camera\n          ref={cameraRef}\n          defaultSettings={{\n            zoomLevel: 9,\n            centerCoordinate: [-73.970895, 40.723279],\n          }}\n        />\n        <ShapeSource\n          id=\"symbolLocationSource\"\n          hitbox={{ width: 20, height: 20 }}\n          onPress={(e) => onSourceLayerPress(e)}\n          shape={stateFeatureCollection}\n        >\n          <SymbolLayer\n            id=\"symbolLocationSymbols\"\n            minZoomLevel={1}\n            style={styles.icon}\n          />\n          <Images nativeAssetImages={['pin']} />\n        </ShapeSource>\n      </MapView>\n      <Bubble>\n        <Text>Tap on Map to add an icon</Text>\n      </Bubble>\n    </>\n  );\n});\n\nexport default CustomIconNativeAsset;\n\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"CustomIconNativeAsset.png",src:n(4364).Z,width:"295",height:"640"}),"}"))}u.isMDXComponent=!0},4364:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/CustomIconNativeAsset-e6393d6f447ce93ca88864b319377ba4.png"}}]);