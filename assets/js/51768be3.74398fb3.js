"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[2520],{7915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=t(5893),a=t(1151);const o={title:"Query Terrain Elevation",tags:["MapView#queryTerrainElevation"],custom_props:{example_rel_path:"V10/QueryTerrainElevation.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/QueryTerrainElevation.js"},i=void 0,s={id:"examples/V10/QueryTerrainElevation",title:"Query Terrain Elevation",description:"Query Terrain Elevation",source:"@site/docs/examples/V10/QueryTerrainElevation.md",sourceDirName:"examples/V10",slug:"/examples/V10/QueryTerrainElevation",permalink:"/docs/examples/V10/QueryTerrainElevation",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/QueryTerrainElevation.js",tags:[{label:"MapView#queryTerrainElevation",permalink:"/docs/tags/map-view-query-terrain-elevation"}],version:"current",frontMatter:{title:"Query Terrain Elevation",tags:["MapView#queryTerrainElevation"],custom_props:{example_rel_path:"V10/QueryTerrainElevation.js"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/V10/QueryTerrainElevation.js"},sidebar:"examplesSidebar",previous:{title:"Markers",permalink:"/docs/examples/V10/Markers"},next:{title:"Simple Model Layer",permalink:"/docs/examples/V10/SimpleModelLayer"}},l={},u=[];function m(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Query Terrain Elevation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import React, { useState, useEffect, useRef } from 'react';\nimport { Easing, Button, View, Text } from 'react-native';\nimport length from '@turf/length';\nimport { lineString } from '@turf/helpers';\nimport { Animated as RNAnimated } from 'react-native';\nimport {\n  MapView,\n  ShapeSource,\n  LineLayer,\n  SkyLayer,\n  Camera,\n  Logger,\n  Terrain,\n  RasterDemSource,\n  Animated,\n  MarkerView,\n  Atmosphere,\n} from '@rnmapbox/maps';\n\nimport Page from '../common/Page';\n\nLogger.setLogLevel('verbose');\n\nconst AnimatedMarkerView = RNAnimated.createAnimatedComponent(MarkerView);\n\nconst styles = {\n  mapView: { flex: 1 },\n  triangleStyle: (size, color) => ({\n    width: 0,\n    height: 0,\n    backgroundColor: 'transparent',\n    borderStyle: 'solid',\n    borderLeftWidth: size,\n    borderRightWidth: size,\n    borderTopWidth: size * 1.3,\n    borderLeftColor: 'transparent',\n    borderRightColor: 'transparent',\n    borderTopColor: color,\n  }),\n};\n\nconst QueryTerrainElevation = ({ ...props }) => {\n  let [routeGeojson, setRouteGeojson] = useState(null);\n  let [animatedRoute, setAnimatedRoute] = useState(null);\n  let [actPoint, setActPoint] = useState(null);\n  // let [pinRoute, setPinRoute] = useState(null);\n  let camera = useRef();\n  let [altitude, setAltitude] = useState(null);\n  let updateAltitudeInterval = useRef();\n  let map = useRef();\n  useEffect(() => {\n    return () => {\n      clearInterval(updateAltitudeInterval.current);\n      updateAltitudeInterval.current = null;\n    };\n  }, []);\n\n  function startAnimation(animatedRoute) {\n    const ts = lineString(animatedRoute.__getValue());\n    const total = length(ts, { units: 'meters' });\n    const points = animatedRoute.__getValue();\n    const endPoint = points[points.length - 1];\n\n    animatedRoute\n      .timing({\n        toValue: { end: { point: endPoint, from: total } },\n        duration: 20000,\n        easing: Easing.linear,\n      })\n      .start(() => {\n        clearInterval(updateAltitudeInterval.current);\n        updateAltitudeInterval.current = null;\n      });\n\n    camera.current.setCamera({\n      heading: 60,\n      zoomLevel: 13.5,\n      animationDuration: 20000,\n    });\n\n    updateAltitudeInterval.current = setInterval(async () => {\n      setAltitude(\n        Math.floor(\n          await map.current.queryTerrainElevation(actPoint.__getValue()),\n        ),\n      );\n    }, 2000);\n  }\n\n  useEffect(() => {\n    (async () => {\n      let response = await fetch(\n        'https://docs.mapbox.com/mapbox-gl-js/assets/route-pin.geojson',\n      );\n      let featureCollection = await response.json();\n      setRouteGeojson(featureCollection);\n      let pinRoute = featureCollection.features[0].geometry.coordinates;\n\n      let animatedRoute = new Animated.RouteCoordinatesArray(pinRoute, {\n        end: {\n          from: length(lineString(pinRoute)),\n        },\n      });\n      setAnimatedRoute(animatedRoute);\n      setActPoint(new Animated.ExtractCoordinateFromArray(animatedRoute, -1));\n      //setPinRoute(pinRoute);\n    })();\n  }, []);\n  return (\n    <Page {...props}>\n      <Button title=\"Start\" onPress={() => startAnimation(animatedRoute)} />\n      <MapView\n        style={styles.mapView}\n        styleURL={'mapbox://styles/mapbox/satellite-streets-v11'}\n        ref={map}\n      >\n        <Camera\n          centerCoordinate={[6.58968, 45.39701]}\n          zoomLevel={12.3}\n          heading={162}\n          pitch={76}\n          ref={camera}\n        />\n\n        <RasterDemSource\n          id=\"mapbox-dem\"\n          url=\"mapbox://mapbox.terrain-rgb\"\n          tileSize={512}\n          maxZoomLevel={14}\n        >\n          <SkyLayer\n            id=\"sky-layer\"\n            style={{\n              skyType: 'atmosphere',\n              skyAtmosphereColor: 'rgba(85, 151, 210, 0.5)',\n            }}\n          />\n\n          <Terrain style={{ exaggeration: 1.5 }} />\n          <Atmosphere\n            style={{\n              starIntensity: 1.0,\n              range: [-3.5, 10.0],\n              spaceColor: '#00ffff',\n              color: '#00ff00',\n              highColor: '#ff00ff',\n            }}\n          />\n        </RasterDemSource>\n\n        {routeGeojson && false && (\n          <ShapeSource id=\"route\" shape={routeGeojson}>\n            <LineLayer\n              id=\"root\"\n              style={{\n                lineColor: 'rgba(0,0,255,0)',\n                lineWidth: 5,\n                lineCap: 'round',\n                lineJoin: 'round',\n              }}\n            />\n          </ShapeSource>\n        )}\n        {animatedRoute && (\n          <Animated.ShapeSource\n            id=\"animated-route\"\n            shape={\n              new Animated.Shape({\n                type: 'LineString',\n                coordinates: animatedRoute,\n              })\n            }\n          >\n            <Animated.LineLayer\n              id={'animated-route'}\n              style={{\n                lineColor: 'rgba(255,0,0,0)',\n                lineWidth: 3,\n                lineCap: 'round',\n                lineJoin: 'round',\n              }}\n            />\n          </Animated.ShapeSource>\n        )}\n\n        {actPoint && (\n          <Animated.ShapeSource\n            id=\"currentLocationSource\"\n            shape={\n              new Animated.Shape({\n                type: 'Point',\n                coordinates: actPoint,\n              })\n            }\n          >\n            <Animated.CircleLayer\n              id=\"currentLocationCircle\"\n              style={{\n                circleOpacity: 1.0,\n                circleColor: '#c62221',\n                circleRadius: 6,\n              }}\n            />\n          </Animated.ShapeSource>\n        )}\n        {actPoint && altitude && (\n          <AnimatedMarkerView coordinate={actPoint} anchor={{ x: 0.5, y: 1 }}>\n            <View style={{ alignItems: 'center' }}>\n              <View\n                style={{\n                  backgroundColor: 'white',\n                  padding: 10,\n                  width: 140,\n                  height: 50,\n                  borderRadius: 10,\n                }}\n              >\n                <Text>Altitude: {altitude} m</Text>\n              </View>\n              <View\n                style={[styles.triangleStyle(12, 'white'), { marginTop: -1 }]}\n              />\n            </View>\n          </AnimatedMarkerView>\n        )}\n      </MapView>\n    </Page>\n  );\n};\n\nexport default QueryTerrainElevation;\n\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"QueryTerrainElevation.png",src:t(3588).Z+"",width:"295",height:"640"}),"}"]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},3588:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/QueryTerrainElevation-ac8cf2d6cfa3e69f451e249355fe0e8d.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var r=t(7294);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);