"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[5280],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>b});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),c=m(t),u=o,b=c["".concat(p,".").concat(u)]||c[u]||d[u]||i;return t?a.createElement(b,s(s({ref:n},l),{},{components:t})):a.createElement(b,s({ref:n},l))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=u;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[c]="string"==typeof e?e:o,s[1]=r;for(var m=2;m<i;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>m});var a=t(7462),o=(t(7294),t(3905));const i={title:"Ornaments",tags:["MapView#logoEnabled","MapView#logoPosition","MapView#attributionEnabled","MapView#attributionPosition","MapView#compassEnabled","MapView#compassPosition","MapView#compassImage","MapView#compassFadeWhenNorth","MapView#scaleBarEnabled","MapView#scaleBarPosition"],custom_props:{example_rel_path:"Map/Ornaments.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/Ornaments.tsx"},s=void 0,r={unversionedId:"examples/Map/Ornaments",id:"examples/Map/Ornaments",title:"Ornaments",description:"Customize ornaments of the map(logo, compass, scalebar, attribution)",source:"@site/docs/examples/Map/Ornaments.md",sourceDirName:"examples/Map",slug:"/examples/Map/Ornaments",permalink:"/docs/examples/Map/Ornaments",draft:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/Ornaments.tsx",tags:[{label:"MapView#logoEnabled",permalink:"/docs/tags/map-view-logo-enabled"},{label:"MapView#logoPosition",permalink:"/docs/tags/map-view-logo-position"},{label:"MapView#attributionEnabled",permalink:"/docs/tags/map-view-attribution-enabled"},{label:"MapView#attributionPosition",permalink:"/docs/tags/map-view-attribution-position"},{label:"MapView#compassEnabled",permalink:"/docs/tags/map-view-compass-enabled"},{label:"MapView#compassPosition",permalink:"/docs/tags/map-view-compass-position"},{label:"MapView#compassImage",permalink:"/docs/tags/map-view-compass-image"},{label:"MapView#compassFadeWhenNorth",permalink:"/docs/tags/map-view-compass-fade-when-north"},{label:"MapView#scaleBarEnabled",permalink:"/docs/tags/map-view-scale-bar-enabled"},{label:"MapView#scaleBarPosition",permalink:"/docs/tags/map-view-scale-bar-position"}],version:"current",frontMatter:{title:"Ornaments",tags:["MapView#logoEnabled","MapView#logoPosition","MapView#attributionEnabled","MapView#attributionPosition","MapView#compassEnabled","MapView#compassPosition","MapView#compassImage","MapView#compassFadeWhenNorth","MapView#scaleBarEnabled","MapView#scaleBarPosition"],custom_props:{example_rel_path:"Map/Ornaments.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/Ornaments.tsx"},sidebar:"examplesSidebar",previous:{title:"Offline Example",permalink:"/docs/examples/Map/OfflineExample"},next:{title:"Point in Map View",permalink:"/docs/examples/Map/PointInMapView"}},p={},m=[],l={toc:m},c="wrapper";function d(e){let{components:n,...i}=e;return(0,o.kt)(c,(0,a.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Customize ornaments of the map(logo, compass, scalebar, attribution)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport { MapView, Camera, Images } from '@rnmapbox/maps';\nimport { Button, StyleSheet, Text, ImageSourcePropType } from 'react-native';\nimport { Divider } from '@rneui/base';\n\nimport Bubble from '../common/Bubble';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\ntype CompassImage = 'compass1' | 'compass2';\nconst images: Record<CompassImage, ImageSourcePropType> = {\n  compass1: require('../../assets/compass1.png'),\n  compass2: require('../../assets/compass2.png'),\n};\n\nenum OrnamentType {\n  Logo = 'logo',\n  Attribution = 'attribution',\n  Compass = 'compass',\n  ScaleBar = 'scaleBar',\n}\n\nenum OrnamentPosition {\n  TopLeft = 'topLeft',\n  TopRight = 'topRight',\n  BottomRight = 'bottomRight',\n  BottomLeft = 'bottomLeft',\n}\n\nconst POSITIONS = {\n  [OrnamentPosition.TopLeft]: { top: 8, left: 8 },\n  [OrnamentPosition.TopRight]: { top: 8, right: 8 },\n  [OrnamentPosition.BottomRight]: { bottom: 8, right: 8 },\n  [OrnamentPosition.BottomLeft]: { bottom: 8, left: 8 },\n};\n\ntype OrnamentButtonsProps = {\n  ornamentType: OrnamentType;\n  visibility: Record<OrnamentType, true | false | undefined>;\n  position: Record<OrnamentType, OrnamentPosition>;\n  onPressVisibility: (ornamentType: OrnamentType) => void;\n  onPressPosition: (ornamentType: OrnamentType) => void;\n};\n\nconst OrnamentButtons = ({\n  ornamentType,\n  visibility,\n  position,\n  onPressVisibility,\n  onPressPosition,\n}: OrnamentButtonsProps) => (\n  <>\n    <Button\n      title={'Visiblity: ' + visibility[ornamentType]}\n      onPress={(): void => onPressVisibility(ornamentType)}\n    />\n    <Button\n      title={'Position: ' + position[ornamentType]}\n      onPress={(): void => onPressPosition(ornamentType)}\n    />\n  </>\n);\n\nconst Ornaments = () => {\n  const [visibility, setVisibility] = useState({\n    [OrnamentType.Logo]: undefined,\n    [OrnamentType.Attribution]: undefined,\n    [OrnamentType.Compass]: undefined,\n    [OrnamentType.ScaleBar]: undefined,\n  });\n\n  const [position, setPosition] = useState({\n    [OrnamentType.Logo]: OrnamentPosition.BottomLeft,\n    [OrnamentType.Attribution]: OrnamentPosition.BottomRight,\n    [OrnamentType.Compass]: OrnamentPosition.TopRight,\n    [OrnamentType.ScaleBar]: OrnamentPosition.TopLeft,\n  });\n\n  const [compassImage, setCompassImage] = useState<CompassImage | undefined>();\n  const [compassFadeWhenNorth, setCompassFadeWhenNorth] = useState<\n    boolean | undefined\n  >(undefined);\n\n  const handlePressVisibility = (ornamentType: OrnamentType): void => {\n    setVisibility((prevState) => {\n      let newValue;\n\n      if (prevState[ornamentType] === undefined) {\n        newValue = true;\n      } else if (prevState[ornamentType] === true) {\n        newValue = false;\n      } else if (prevState[ornamentType] === false) {\n        newValue = undefined;\n      }\n\n      return { ...prevState, [ornamentType]: newValue };\n    });\n  };\n\n  const handlePressPosition = (ornamentType: OrnamentType): void => {\n    setPosition((prevState) => {\n      let newValue;\n\n      if (prevState[ornamentType] === OrnamentPosition.TopLeft) {\n        newValue = OrnamentPosition.TopRight;\n      } else if (prevState[ornamentType] === OrnamentPosition.TopRight) {\n        newValue = OrnamentPosition.BottomRight;\n      } else if (prevState[ornamentType] === OrnamentPosition.BottomRight) {\n        newValue = OrnamentPosition.BottomLeft;\n      } else if (prevState[ornamentType] === OrnamentPosition.BottomLeft) {\n        newValue = OrnamentPosition.TopLeft;\n      }\n\n      return { ...prevState, [ornamentType]: newValue };\n    });\n  };\n\n  return (\n    <>\n      <MapView\n        style={styles.matchParent}\n        logoEnabled={visibility[OrnamentType.Logo]}\n        logoPosition={POSITIONS[position[OrnamentType.Logo]]}\n        attributionEnabled={visibility[OrnamentType.Attribution]}\n        attributionPosition={POSITIONS[position[OrnamentType.Attribution]]}\n        compassEnabled={visibility[OrnamentType.Compass]}\n        compassPosition={POSITIONS[position[OrnamentType.Compass]]}\n        compassImage={compassImage}\n        compassFadeWhenNorth={compassFadeWhenNorth}\n        scaleBarEnabled={visibility[OrnamentType.ScaleBar]}\n        scaleBarPosition={POSITIONS[position[OrnamentType.ScaleBar]]}\n      >\n        <Images images={images} />\n        <Camera />\n      </MapView>\n\n      <Bubble style={styles.bubble}>\n        <Text>Logo</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.Logo}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Text>Attribution</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.Attribution}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Text>Compass</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.Compass}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n        <Button\n          title={'Image: ' + compassImage}\n          onPress={() => {\n            if (!compassImage) {\n              setCompassImage('compass1');\n            } else if (compassImage === 'compass1') {\n              setCompassImage('compass2');\n            } else {\n              setCompassImage(undefined);\n            }\n          }}\n        />\n        <Button\n          title={'Fade when north: ' + compassFadeWhenNorth}\n          onPress={() => {\n            if (compassFadeWhenNorth === undefined) {\n              setCompassFadeWhenNorth(true);\n            } else if (compassFadeWhenNorth) {\n              setCompassFadeWhenNorth(false);\n            } else {\n              setCompassFadeWhenNorth(undefined);\n            }\n          }}\n        />\n\n        <Divider style={styles.divider} />\n\n        <Text>ScaleBar</Text>\n        <OrnamentButtons\n          ornamentType={OrnamentType.ScaleBar}\n          visibility={visibility}\n          position={position}\n          onPressVisibility={handlePressVisibility}\n          onPressPosition={handlePressPosition}\n        />\n      </Bubble>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  divider: {\n    width: '100%',\n    marginTop: 5,\n    marginBottom: 10,\n  },\n  bubble: {\n    flex: 0,\n    alignItems: 'flex-start',\n    padding: 10,\n    marginBottom: 96,\n  },\n  matchParent: {\n    flex: 1,\n  },\n});\n\nexport default Ornaments;\n\nconst metadata: ExampleWithMetadata['metadata'] = {\n  title: 'Ornaments',\n  tags: [\n    'MapView#logoEnabled',\n    'MapView#logoPosition',\n    'MapView#attributionEnabled',\n    'MapView#attributionPosition',\n    'MapView#compassEnabled',\n    'MapView#compassPosition',\n    'MapView#compassImage',\n    'MapView#compassFadeWhenNorth',\n    'MapView#scaleBarEnabled',\n    'MapView#scaleBarPosition',\n  ],\n  docs: `\nCustomize ornaments of the map(logo, compass, scalebar, attribution)\n`,\n};\nOrnaments.metadata = metadata;\n\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ornaments.png",src:t(2927).Z,width:"295",height:"640"}),"}"))}d.isMDXComponent=!0},2927:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Ornaments-f1220fcf917681a339d780e7204c17bd.png"}}]);