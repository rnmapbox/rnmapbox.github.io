"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[7662],{8955:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var t=a(5893),s=a(1151);const o={title:"Offline Example",tags:["offlineManager#createPack","offlineManager#getPack","offlineManager#getPacks"],custom_props:{example_rel_path:"Map/OfflineExample.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/OfflineExample.tsx"},l=void 0,p={id:"examples/Map/OfflineExample",title:"Offline Example",description:"Demonstates basic use of offlineManager api.",source:"@site/docs/examples/Map/OfflineExample.md",sourceDirName:"examples/Map",slug:"/examples/Map/OfflineExample",permalink:"/docs/examples/Map/OfflineExample",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/OfflineExample.tsx",tags:[{inline:!0,label:"offlineManager#createPack",permalink:"/docs/tags/offline-manager-create-pack"},{inline:!0,label:"offlineManager#getPack",permalink:"/docs/tags/offline-manager-get-pack"},{inline:!0,label:"offlineManager#getPacks",permalink:"/docs/tags/offline-manager-get-packs"}],version:"current",frontMatter:{title:"Offline Example",tags:["offlineManager#createPack","offlineManager#getPack","offlineManager#getPacks"],custom_props:{example_rel_path:"Map/OfflineExample.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/Map/OfflineExample.tsx"},sidebar:"examplesSidebar",previous:{title:"Map (un-)mount",permalink:"/docs/examples/Map/MapUnMount"},next:{title:"Ornaments",permalink:"/docs/examples/Map/Ornaments"}},c={},i=[];function r(e){const n={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Demonstates basic use of offlineManager api."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import geoViewport from '@mapbox/geo-viewport';\nimport Mapbox, {\n  Camera,\n  MapView,\n  offlineManager,\n  StyleURL,\n} from '@rnmapbox/maps';\nimport React, { useState } from 'react';\nimport { Button, Dimensions, TextInput } from 'react-native';\n\nimport { ExampleWithMetadata } from '../common/ExampleMetadata'; // exclude-from-doc\n\nconst CENTER_COORD: [number, number] = [-73.970895, 40.723279];\nconst MAPBOX_VECTOR_TILE_SIZE = 512;\nconsole.log('=> Mapbox[0]:', Mapbox);\nconsole.log('=> Mapbox.StyleURL[1]:', Mapbox.StyleURL);\nconsole.log('=> StyleURL[2]:', StyleURL);\nconst STYLE_URL = Mapbox.StyleURL.Satellite;\n\nconst OfflineExample = () => {\n  const [packName, setPackName] = useState('pack-1');\n  const [showEditTitle, setShowEditTitle] = useState(false);\n\n  return (\n    <>\n      <Button\n        title={`Pack name: ${packName}`}\n        onPress={() => {\n          setShowEditTitle(!showEditTitle);\n        }}\n      />\n      {showEditTitle && (\n        <TextInput\n          value={packName}\n          autoFocus={true}\n          onChangeText={(text) => setPackName(text)}\n          onBlur={() => setShowEditTitle(false)}\n        />\n      )}\n      <Button\n        title=\"Get all packs\"\n        onPress={async () => {\n          const packs = await offlineManager.getPacks();\n          console.log('=> packs:', packs);\n          packs.forEach((pack) => {\n            console.log(\n              'pack:',\n              pack,\n              'name:',\n              pack.name,\n              'bounds:',\n              pack?.bounds,\n              'metadata',\n              pack?.metadata,\n            );\n          });\n        }}\n      />\n      <Button\n        title=\"Get pack\"\n        onPress={async () => {\n          const pack = await offlineManager.getPack(packName);\n          if (pack) {\n            console.log(\n              'pack:',\n              pack,\n              'name:',\n              pack.name,\n              'bounds:',\n              pack?.bounds,\n              'metadata',\n              pack?.metadata,\n            );\n\n            console.log('=> status', await pack?.status());\n          }\n        }}\n      />\n      <Button\n        title=\"Resume pack\"\n        onPress={async () => {\n          const pack = await offlineManager.getPack(packName);\n          if (pack) {\n            await pack.resume();\n          }\n        }}\n      />\n      <Button\n        title=\"Remove packs\"\n        onPress={async () => {\n          const result = await offlineManager.resetDatabase();\n          console.log('Reset DB done:', result);\n        }}\n      />\n      <Button\n        title=\"Create Pack\"\n        onPress={() => {\n          const { width, height } = Dimensions.get('window');\n          const bounds: [number, number, number, number] = geoViewport.bounds(\n            CENTER_COORD,\n            12,\n            [width, height],\n            MAPBOX_VECTOR_TILE_SIZE,\n          );\n\n          const options = {\n            name: packName,\n            styleURL: STYLE_URL,\n            bounds: [\n              [bounds[0], bounds[1]],\n              [bounds[2], bounds[3]],\n            ] as [[number, number], [number, number]],\n            minZoom: 10,\n            maxZoom: 20,\n            metadata: {\n              whatIsThat: 'foo',\n            },\n          };\n          offlineManager.createPack(options, (region, status) =>\n            console.log('=> progress callback region:', 'status: ', status),\n          );\n        }}\n      />\n      <MapView style={{ flex: 1 }} styleURL={STYLE_URL}>\n        <Camera zoomLevel={10} centerCoordinate={CENTER_COORD} />\n      </MapView>\n    </>\n  );\n};\n\nexport default OfflineExample;\n\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"OfflineExample.png",src:a(6037).Z+"",width:"295",height:"640"}),"}"]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},6037:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/OfflineExample-473f3aa075b0821e25d1be29132c0b39.png"},1151:(e,n,a)=>{a.d(n,{a:()=>l});var t=a(7294);const s={},o=t.createContext(s);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);