"use strict";(self.webpackChunkmap_docs=self.webpackChunkmap_docs||[]).push([[6144],{1962:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>r});var t=n(5893),s=n(1151);const c={title:"CacheManagement",tags:["Cache","Cache Management","Offline Manager","Offline Packs","Validate Cache","Invalidate Cache","Get Cache Size","Set Max Cache Size"],custom_props:{example_rel_path:"CacheOffline/CacheManagement.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/CacheOffline/CacheManagement.tsx"},l=void 0,i={id:"examples/CacheOffline/CacheManagement",title:"CacheManagement",description:"Manages map cache.",source:"@site/docs/examples/CacheOffline/CacheManagement.md",sourceDirName:"examples/CacheOffline",slug:"/examples/CacheOffline/CacheManagement",permalink:"/docs/examples/CacheOffline/CacheManagement",draft:!1,unlisted:!1,editUrl:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/CacheOffline/CacheManagement.tsx",tags:[{inline:!0,label:"Cache",permalink:"/docs/tags/cache"},{inline:!0,label:"Cache Management",permalink:"/docs/tags/cache-management"},{inline:!0,label:"Offline Manager",permalink:"/docs/tags/offline-manager"},{inline:!0,label:"Offline Packs",permalink:"/docs/tags/offline-packs"},{inline:!0,label:"Validate Cache",permalink:"/docs/tags/validate-cache"},{inline:!0,label:"Invalidate Cache",permalink:"/docs/tags/invalidate-cache"},{inline:!0,label:"Get Cache Size",permalink:"/docs/tags/get-cache-size"},{inline:!0,label:"Set Max Cache Size",permalink:"/docs/tags/set-max-cache-size"}],version:"current",frontMatter:{title:"CacheManagement",tags:["Cache","Cache Management","Offline Manager","Offline Packs","Validate Cache","Invalidate Cache","Get Cache Size","Set Max Cache Size"],custom_props:{example_rel_path:"CacheOffline/CacheManagement.tsx"},custom_edit_url:"https://github.com/rnmapbox/maps/tree/master/example/src/examples/CacheOffline/CacheManagement.tsx"},sidebar:"examplesSidebar",previous:{title:"CacheManagement",permalink:"/docs/examples/CacheManagement/"},next:{title:"Change Offline Region",permalink:"/docs/examples/CacheOffline/CreateOfflineRegion"}},o={},r=[];function m(e){const a={code:"code",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.p,{children:"Manages map cache."}),"\n",(0,t.jsx)(a.p,{children:"Uses the offline manager to manage the cache and the local storage in general. Shows how to invalidate cache to remove outdated tiles, how to clear the entire local storage from tiles and offline packs and to visualize the local storage usage amount."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-jsx",children:"import React, { useState, useCallback } from 'react';\nimport Mapbox, { MapView, Camera } from '@rnmapbox/maps';\nimport {\n  Alert,\n  StyleSheet,\n  View,\n  TextInput,\n  TouchableOpacity,\n  Text,\n} from 'react-native';\n\nimport sheet from '../../styles/sheet';\nimport { DEFAULT_CENTER_COORDINATE } from '../../utils';\nimport BaseExamplePropTypes, {\n  BaseExampleProps,\n} from '../common/BaseExamplePropTypes';\nimport { ExampleWithMetadata } from '../common/ExampleMetadata';\n\nconst styles = StyleSheet.create({\n  button: {\n    alignItems: 'center',\n    backgroundColor: 'blue',\n    borderRadius: 3,\n    justifyContent: 'center',\n    padding: 8,\n    width: '100%',\n  },\n  buttonTxt: {\n    color: 'white',\n    textAlign: 'center',\n  },\n  control: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 16,\n    padding: 8,\n    width: '40%',\n  },\n  controlsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  textInput: {\n    borderBottomColor: 'grey',\n    borderBottomWidth: 1,\n    marginBottom: 8,\n    padding: 8,\n    width: '100%',\n  },\n});\n\nconst CacheManagement: React.FC<Partial<BaseExampleProps>> = () => {\n  const [cacheSize, setCacheSize] = useState('');\n\n  const invalidateAmbientCache = useCallback(async () => {\n    await Mapbox.offlineManager.invalidateAmbientCache();\n    Alert.alert('Ambient cache successfully invalidated');\n  }, []);\n\n  const resetDatabase = useCallback(async () => {\n    await Mapbox.offlineManager.resetDatabase();\n    Alert.alert('Database successfully reset');\n  }, []);\n\n  const clearAmbientCache = useCallback(async () => {\n    await Mapbox.offlineManager.clearAmbientCache();\n    Alert.alert('Ambient cache successfully cleared');\n  }, []);\n\n  const setMaximumAmbientCacheSize = useCallback(async () => {\n    const newMaxSize = parseInt(cacheSize, 10);\n    await Mapbox.offlineManager.setMaximumAmbientCacheSize(newMaxSize);\n    Alert.alert(`Max cache size successfully set to ${newMaxSize} bytes`);\n  }, [cacheSize]);\n\n  const validateCacheInputValue = useCallback(\n    (value: string) => !isNaN(parseInt(value, 10)),\n    [],\n  );\n\n  const onChangeCacheSize = useCallback(\n    (value: string) => setCacheSize(value),\n    [],\n  );\n\n  const validSizeValue = validateCacheInputValue(cacheSize);\n  const buttonStyles = validSizeValue\n    ? styles.button\n    : [styles.button, { backgroundColor: 'grey' }];\n\n  return (\n    <>\n      <MapView style={sheet.matchParent}>\n        <Camera zoomLevel={16} centerCoordinate={DEFAULT_CENTER_COORDINATE} />\n      </MapView>\n\n      <View style={styles.controlsContainer}>\n        <View style={styles.control}>\n          <TouchableOpacity\n            onPress={invalidateAmbientCache}\n            style={styles.button}\n          >\n            <Text style={styles.buttonTxt}>Invalidate cache</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.control}>\n          <TouchableOpacity onPress={resetDatabase} style={styles.button}>\n            <Text style={styles.buttonTxt}>Reset database</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.control}>\n          <TextInput\n            onChangeText={onChangeCacheSize}\n            value={cacheSize}\n            placeholder=\"New max\"\n            keyboardType=\"numeric\"\n            style={styles.textInput}\n          />\n          <TouchableOpacity\n            onPress={setMaximumAmbientCacheSize}\n            style={buttonStyles}\n            disabled={!validSizeValue}\n          >\n            <Text style={styles.buttonTxt}>Set ambient max cache</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.control}>\n          <TouchableOpacity onPress={clearAmbientCache} style={styles.button}>\n            <Text style={styles.buttonTxt}>Clear ambient cache</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n};\n\nCacheManagement.propTypes = {\n  ...BaseExamplePropTypes,\n};\n\nexport default CacheManagement;\n\n\n"})}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.img,{alt:"CacheManagement.png",src:n(701).Z+"",width:"295",height:"640"}),"}"]})]})}function h(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},701:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/CacheManagement-5a9367d3d0d60d77b351d7bf5676b99d.png"},1151:(e,a,n)=>{n.d(a,{Z:()=>i,a:()=>l});var t=n(7294);const s={},c=t.createContext(s);function l(e){const a=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(c.Provider,{value:a},e.children)}}}]);